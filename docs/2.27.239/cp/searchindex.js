Search.setIndex({"docnames": ["README.md", "basic.color.py", "basic.golomb_ruler.py", "basic.n_queen.py", "basic.truck_fleet.py", "creating_model", "docplex.cp.blackbox.py", "docplex.cp.config.py", "docplex.cp.expression.py", "docplex.cp.function.py", "docplex.cp.fzn.fzn_parser.py", "docplex.cp.model.py", "docplex.cp.modeler.py", "docplex.cp.parameters.py", "docplex.cp.solution.py", "docplex.cp.solver.cpo_callback.py", "docplex.cp.solver.solver.py", "docplex.cp.solver.solver_listener.py", "docplex.cp.utils.py", "docplex.cp.utils_visu.py", "docplex.util.environment.py", "getting_started", "index", "refman", "samples", "visu.flow_shop.py", "visu.house_building_calendar.py", "visu.house_building_optional.py", "visu.job_shop_basic.py", "visu.open_shop.py", "visu.rcpsp.py", "visu.setup_times.py", "visu.squaring_square.py"], "filenames": ["README.md.rst", "basic.color.py.rst", "basic.golomb_ruler.py.rst", "basic.n_queen.py.rst", "basic.truck_fleet.py.rst", "creating_model.rst", "docplex.cp.blackbox.py.rst", "docplex.cp.config.py.rst", "docplex.cp.expression.py.rst", "docplex.cp.function.py.rst", "docplex.cp.fzn.fzn_parser.py.rst", "docplex.cp.model.py.rst", "docplex.cp.modeler.py.rst", "docplex.cp.parameters.py.rst", "docplex.cp.solution.py.rst", "docplex.cp.solver.cpo_callback.py.rst", "docplex.cp.solver.solver.py.rst", "docplex.cp.solver.solver_listener.py.rst", "docplex.cp.utils.py.rst", "docplex.cp.utils_visu.py.rst", "docplex.util.environment.py.rst", "getting_started.rst", "index.rst", "refman.rst", "samples.rst", "visu.flow_shop.py.rst", "visu.house_building_calendar.py.rst", "visu.house_building_optional.py.rst", "visu.job_shop_basic.py.rst", "visu.open_shop.py.rst", "visu.rcpsp.py.rst", "visu.setup_times.py.rst", "visu.squaring_square.py.rst"], "titles": ["README.md", "basic/color.py example", "basic/golomb_ruler.py example", "basic/n_queen.py example", "basic/truck_fleet.py example", "Creating a constraint programming model", "Module <strong>docplex.cp.blackbox</strong>", "Module <strong>docplex.cp.config</strong>", "Module <strong>docplex.cp.expression</strong>", "Module <strong>docplex.cp.function</strong>", "Module <strong>docplex.cp.fzn.fzn_parser</strong>", "Module <strong>docplex.cp.model</strong>", "Module <strong>docplex.cp.modeler</strong>", "Module <strong>docplex.cp.parameters</strong>", "Module <strong>docplex.cp.solution</strong>", "Module <strong>docplex.cp.solver.cpo_callback</strong>", "Module <strong>docplex.cp.solver.solver</strong>", "Module <strong>docplex.cp.solver.solver_listener</strong>", "Module <strong>docplex.cp.utils</strong>", "Module <strong>docplex.cp.utils_visu</strong>", "Module <strong>docplex.util.environment</strong>", "Getting started with constraint programming in DOcplex", "Constraint Programming Modeling for Python (DOcplex.CP)", "<strong>docplex.cp</strong> reference manual", "Examples of constraint programming", "visu/flow_shop.py example", "visu/house_building_calendar.py example", "visu/house_building_optional.py example", "visu/job_shop_basic.py example", "visu/open_shop.py example", "visu/rcpsp.py example", "visu/setup_times.py example", "visu/squaring_square.py example"], "terms": {"ibm": [0, 1, 2, 3, 4, 5, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32], "reg": 0, "decis": [0, 8, 11, 12, 13, 14, 16, 20, 21], "optim": [0, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23], "model": [0, 1, 2, 3, 4, 8, 9, 10, 13, 14, 15, 16, 17, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "python": [0, 6, 7, 8, 11, 12, 14, 17, 18, 19, 20, 23, 24, 32], "docplex": [0, 1, 2, 3, 4, 5, 24, 25, 26, 27, 28, 29, 30, 31, 32], "welcom": [0, 22], "licens": [0, 1, 2, 3, 4, 22, 25, 26, 27, 28, 29, 30, 31, 32], "under": [0, 1, 2, 3, 4, 20, 22, 25, 26, 27, 28, 29, 30, 31, 32], "apach": [0, 1, 2, 3, 4, 22, 25, 26, 27, 28, 29, 30, 31, 32], "v2": [0, 6, 8, 18], "0": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32], "With": [0, 12, 13, 22], "thi": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 31, 32], "librari": [0, 6, 19, 22, 23], "you": [0, 1, 5, 11, 12, 13, 16, 19, 20, 21, 22, 24], "can": [0, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29], "quickli": [0, 13, 22], "easili": [0, 5, 7, 12, 14, 22], "add": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 13, 14, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32], "power": [0, 5, 12, 22, 23], "your": [0, 5, 13, 20, 21, 22, 24], "applic": [0, 5, 22], "need": [0, 4, 5, 6, 8, 12, 13, 18, 21, 22, 23, 24, 31], "ilog": [0, 5, 21, 22], "cplex": [0, 5, 6, 20, 22, 23], "studio": [0, 5, 6, 20, 21, 22, 23], "solv": [0, 1, 2, 3, 4, 6, 11, 13, 14, 15, 16, 17, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "i": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "compos": [0, 11, 12], "2": [0, 1, 2, 3, 4, 5, 6, 8, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32], "modul": [0, 22, 23, 24], "namespac": 0, "mp": [0, 5, 11, 20], "cp": [0, 1, 2, 3, 4, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32], "requir": [0, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 16, 18, 19, 23, 24, 26, 27, 29, 30, 32], "v12": 0, "10": [0, 1, 3, 4, 6, 7, 11, 12, 14, 15, 19, 25, 26, 27, 28, 29, 30, 31], "later": [0, 5, 6, 13, 21], "instal": [0, 4, 5, 18, 19, 20, 22, 24, 32], "machin": [0, 11, 13, 20, 24, 25, 28, 29, 31], "numpi": [0, 5, 18, 19, 24, 32], "friendli": 0, "pip": [0, 21, 32], "get": [0, 6, 7, 8, 9, 10, 11, 13, 14, 16, 18, 19, 20, 22], "document": [0, 1, 2, 3, 4, 5, 8, 11, 14, 18, 21, 25, 26, 27, 28, 29, 30, 31, 32], "exampl": [0, 5, 6, 7, 8, 11, 12, 13, 14, 16, 18, 19, 22], "latest": [0, 5], "http": [0, 1, 2, 3, 4, 6, 10, 24, 25, 26, 27, 28, 29, 30, 31, 32], "ibmdecisionoptim": 0, "github": [0, 24], "io": [0, 18], "doc": [0, 10], "archiv": [0, 21, 24], "23": [0, 31], "222": 0, "22": [0, 6, 31], "213": 0, "21": 0, "207": 0, "20": [0, 4, 12, 13, 19, 31, 32], "204": 0, "19": [0, 20, 31, 32], "202": 0, "18": [0, 31, 32], "200": [0, 21], "16": [0, 31, 32], "195": 0, "com": [0, 22], "edit": [0, 5, 8, 21, 22], "free": [0, 5, 12, 21, 22], "commun": [0, 5, 11, 16, 22], "www": [0, 1, 2, 3, 4, 10, 25, 26, 27, 28, 29, 30, 31, 32], "account": [0, 8, 11, 12, 24, 26], "u": [0, 22], "en": [0, 2, 3, 24, 32], "signup": 0, "formid": 0, "urx": 0, "20028": 0, "limit": [0, 5, 6, 8, 11, 12, 13, 16, 17, 18, 20], "capabl": 0, "term": [0, 12], "problem": [0, 1, 2, 3, 4, 5, 6, 8, 11, 12, 13, 14, 16, 17, 18, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32], "size": [0, 2, 5, 6, 7, 8, 10, 12, 14, 18, 24, 25, 26, 27, 28, 29, 30, 31, 32], "faculti": 0, "member": [0, 5, 12, 14, 23], "research": 0, "profession": 0, "accredit": 0, "institut": 0, "access": [0, 5, 6, 7, 11, 12, 13, 14, 16, 20, 21], "an": [0, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 28, 31], "unlimit": [0, 5], "version": [0, 1, 2, 3, 4, 5, 6, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32], "through": [0, 12, 24, 26, 27], "academ": 0, "initi": [0, 2, 3, 4, 5, 8, 9, 10, 11, 13, 14, 16, 18, 24, 25, 26, 27, 28, 29, 30, 31, 32], "biz": 0, "student": 0, "depend": [0, 4, 6, 7, 12, 14, 16, 17, 19, 20, 21, 24, 31, 32], "These": [0, 5, 11, 12, 14, 16, 17, 24], "third": [0, 20], "parti": [0, 18], "ar": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31], "automat": [0, 5, 6, 8, 11, 12, 13, 16, 19, 20, 21, 23], "futur": [0, 18, 19], "pypi": [0, 21], "org": [0, 1, 2, 3, 4, 6, 10, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32], "request": [0, 6, 7, 8, 14, 16, 20, 23], "six": [0, 1, 24], "certifi": 0, "deliv": [0, 4, 14, 24], "januari": [0, 1, 2, 3, 4, 25, 26, 27, 28, 29, 30, 31, 32], "2004": [0, 1, 2, 3, 4, 25, 26, 27, 28, 29, 30, 31, 32], "see": [0, 2, 3, 5, 6, 8, 11, 12, 13, 14, 16, 19, 20, 21, 24, 25, 30, 32], "txt": [0, 18, 20], "sourc": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 25, 26, 27, 28, 29, 30, 31, 32], "file": [1, 2, 3, 4, 6, 8, 10, 11, 13, 14, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32], "provid": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 14, 15, 16, 17, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "c": [1, 2, 3, 4, 5, 12, 18, 25, 26, 27, 28, 29, 30, 31, 32], "copyright": [1, 2, 3, 4, 25, 26, 27, 28, 29, 30, 31, 32], "corp": [1, 2, 3, 4, 25, 26, 27, 28, 29, 30, 31, 32], "2015": [1, 2, 3, 4, 25, 26, 27, 28, 29, 30, 31, 32], "2022": [1, 2, 3, 4, 25, 26, 27, 28, 29, 30, 31, 32], "The": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "involv": [1, 12, 13, 24], "choos": [1, 12, 13, 21, 24], "countri": [1, 24], "map": [1, 12, 14, 18, 20, 24, 31], "wai": [1, 5, 7, 8, 11, 12, 13, 14, 16, 20, 23, 24], "most": [1, 4, 5, 6, 7, 11, 12, 13, 14, 18, 21, 23, 24, 28], "four": [1, 24], "blue": [1, 19, 24], "white": [1, 24], "yellow": [1, 24], "green": [1, 24], "us": [1, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 28, 29, 31, 32], "neighbor": [1, 24], "same": [1, 2, 3, 4, 5, 6, 8, 9, 11, 12, 13, 14, 16, 18, 19, 20, 23, 24, 25, 28, 29], "In": [1, 2, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 16, 19, 24, 28], "exercis": [1, 24], "find": [1, 13, 14, 24, 28, 30], "solut": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 15, 16, 17, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "belgium": [1, 24], "denmark": [1, 24], "franc": [1, 24], "germani": [1, 24], "luxembourg": [1, 24], "netherland": [1, 24], "pleas": [1, 2, 3, 4, 11, 14, 22, 25, 26, 27, 28, 29, 30, 31, 32], "refer": [1, 2, 3, 4, 5, 6, 11, 12, 16, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32], "appropri": [1, 2, 3, 4, 6, 11, 13, 16, 18, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32], "setup": [1, 2, 3, 4, 24, 25, 26, 27, 28, 29, 30, 31, 32], "configur": [1, 2, 3, 4, 6, 11, 13, 14, 16, 17, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "from": [1, 2, 3, 4, 5, 6, 8, 11, 12, 13, 14, 16, 18, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "import": [1, 2, 3, 4, 5, 7, 8, 11, 12, 14, 18, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "cpomodel": [1, 2, 3, 4, 5, 6, 10, 11, 12, 14, 15, 16, 17, 23, 25, 26, 27, 28, 29, 30, 31, 32], "creat": [1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 25, 26, 27, 28, 29, 30, 31, 32], "cpo": [1, 4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 23], "mdl": [1, 2, 3, 4, 5, 6, 8, 10, 11, 12, 16, 25, 26, 27, 28, 29, 30, 31, 32], "variabl": [1, 2, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 20, 23, 25, 26, 27, 28, 29, 30, 31, 32], "contain": [1, 5, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 20, 21, 23, 24, 25, 28, 29, 30], "integer_var": [1, 4, 5, 6, 8, 11, 23], "3": [1, 3, 4, 5, 8, 11, 12, 13, 14, 17, 18, 19, 21, 24, 26, 27, 31], "all_countri": 1, "constraint": [1, 7, 8, 10, 11, 12, 13, 14, 16, 26, 27, 29, 30, 31], "print": [1, 2, 3, 4, 5, 7, 8, 11, 13, 14, 16, 18, 19, 24, 25, 26, 27, 28, 29, 30, 31, 32], "nsolv": [1, 2, 4], "msol": [1, 2, 3, 4, 5, 17], "timelimit": [1, 2, 3, 4, 5, 11, 13, 16, 25, 26, 27, 28, 29, 30, 31, 32], "statu": [1, 2, 3, 4, 5, 11, 12, 14, 16, 24], "get_solve_statu": [1, 2, 3, 4, 5, 14], "red": [1, 24], "get_nam": [1, 6, 8, 11, 14, 26, 27, 30, 31], "els": [1, 2, 3, 4, 5], "No": [1, 12], "found": [1, 5, 7, 10, 11, 12, 13, 14, 16, 17, 18], "solver": [1, 6, 7, 11, 12, 13, 14, 20, 22, 23], "log": [1, 5, 7, 9, 11, 12, 13, 14, 16, 17, 18, 20, 23], "nsolver": 1, "get_solver_log": [1, 11, 14, 16], "mathemat": [2, 24], "golomb": [2, 24], "ruler": [2, 24], "set": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 29, 30, 31, 32], "mark": [2, 11, 12, 24], "integ": [2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 18, 19, 20, 23, 24, 30], "posit": [2, 8, 12, 13, 14, 18, 20, 24], "along": [2, 24], "imaginari": [2, 24], "two": [2, 3, 4, 6, 8, 9, 12, 13, 14, 18, 20, 24, 26, 31], "pair": [2, 12, 20, 24], "distanc": [2, 8, 12, 24, 31], "apart": [2, 24], "number": [2, 3, 4, 5, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 24, 25, 26, 28, 29, 30, 31], "its": [2, 4, 5, 6, 7, 8, 11, 12, 13, 14, 16, 18, 19, 20, 22, 24, 30, 32], "order": [2, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 18, 20, 23, 24, 25, 28, 29], "largest": [2, 12, 24], "between": [2, 4, 5, 7, 8, 11, 12, 13, 14, 17, 18, 20, 24, 27, 30, 31, 32], "length": [2, 7, 8, 11, 12, 14, 20, 24], "wikipedia": [2, 3, 5, 24, 32], "wiki": [2, 3, 6, 24, 32], "more": [2, 3, 5, 8, 11, 12, 13, 16, 17, 20, 21, 22, 24], "inform": [2, 3, 5, 7, 8, 11, 12, 13, 14, 15, 16, 18, 21, 23, 24], "For": [2, 5, 8, 11, 12, 13, 14, 16, 17, 20, 24], "5": [2, 4, 5, 6, 8, 12, 13, 14, 16, 19, 26, 27, 31], "1": [2, 3, 4, 5, 6, 8, 10, 11, 12, 13, 14, 16, 19, 20, 25, 26, 27, 28, 30, 31], "4": [2, 4, 5, 6, 8, 11, 12, 13, 14, 18, 20, 21, 26, 27, 31, 32], "9": [2, 7, 8, 11, 12, 13, 14, 18, 21, 26, 27, 31, 32], "11": [2, 4, 14, 31, 32], "7": [2, 4, 5, 8, 11, 12, 14, 16, 17, 19, 20, 21, 26, 27, 31, 32], "8": [2, 3, 5, 8, 10, 11, 12, 13, 14, 16, 17, 18, 20, 21, 26, 27, 31, 32], "sy": [2, 3, 4, 5, 7, 10, 11, 14, 18, 32], "stdout": [2, 3, 4, 5, 7, 8, 10, 11, 14, 18], "data": [2, 3, 4, 5, 12, 14, 15, 17, 18, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32], "prepar": [2, 4, 26, 28, 30, 31], "estim": [2, 4], "upper": [2, 4, 6, 8, 12, 14, 19, 26, 27], "bound": [2, 4, 6, 8, 12, 13, 14], "max_length": 2, "build": [2, 3, 4, 6, 8, 11, 12, 14, 18, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32], "arrai": [2, 4, 5, 6, 8, 10, 11, 12, 14, 18, 26, 32], "correspond": [2, 4, 5, 6, 8, 12, 14, 18, 20, 26, 27], "integer_var_list": [2, 3, 4, 5, 8, 23], "m": [2, 12, 18, 24, 25, 28, 29, 31], "should": [2, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 20, 24], "all": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 28, 29, 30], "differ": [2, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 23, 24, 25, 29, 30, 31, 32], "dist": 2, "j": [2, 3, 4, 12, 19, 25, 28, 29, 30, 31, 32], "rang": [2, 3, 4, 5, 8, 11, 12, 13, 14, 19, 23, 25, 26, 27, 28, 29, 30, 31, 32], "all_diff": [2, 3, 5, 12, 23], "avoid": [2, 5, 6, 11, 26, 27], "symmetr": 2, "mirror": 2, "minim": [2, 4, 8, 9, 10, 11, 12, 14, 16, 18, 23, 24, 25, 26, 28, 29, 30, 31], "last": [2, 4, 8, 11, 12, 13, 14, 16, 17, 18, 19, 23], "displai": [2, 3, 4, 11, 13, 16, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "result": [2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32], "100": [2, 5, 8, 11, 13, 26], "write": [2, 3, 4, 5, 10, 11, 12, 14, 16, 18, 20, 23, 24], "n": [2, 3, 4, 5, 9, 12, 13, 24], "v": [2, 3, 5, 8, 9, 12, 13, 25, 28, 29, 30, 31], "str": [2, 5, 8, 10, 18, 19, 20, 25, 28, 29, 30, 32], "time": [2, 5, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 23, 24, 26, 27, 28, 29, 30, 31], "round": [2, 5, 12, 23], "get_solve_tim": [2, 14], "": [2, 5, 6, 8, 9, 11, 12, 14, 16, 18, 19, 20, 26, 27, 28, 30, 31], "search": [2, 4, 5, 11, 13, 14, 16, 17, 18, 22, 23, 32], "eight": [3, 12, 24], "queen": [3, 24], "puzzl": [3, 24], "place": [3, 5, 6, 12, 24, 26, 27, 32], "chess": [3, 24], "8x8": [3, 24], "chessboard": [3, 24], "so": [3, 8, 9, 11, 12, 13, 18, 20, 24, 29], "threaten": [3, 24], "each": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "other": [3, 5, 7, 8, 11, 12, 13, 14, 16, 18, 20, 23, 24, 26, 27], "thu": [3, 14, 24], "share": [3, 12, 24], "row": [3, 8, 24], "column": [3, 8, 24], "diagon": [3, 24], "gener": [3, 8, 11, 12, 13, 14, 16, 19, 22, 23, 24, 30], "nxn": 3, "where": [3, 4, 5, 6, 7, 9, 11, 12, 14, 16, 18, 19, 21, 24], "exist": [3, 5, 6, 8, 11, 12, 14, 16, 18, 19, 20, 24], "natur": [3, 7, 12, 18, 24], "except": [3, 5, 6, 8, 10, 11, 12, 13, 14, 16, 17, 18, 20, 24, 25, 29], "eight_queens_puzzl": [3, 24], "paramet": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23], "nb_queen": [3, 5], "index": [3, 4, 8, 11, 12, 18, 19, 20, 22, 23, 26, 27], "x": [3, 5, 6, 8, 9, 12, 13, 14, 17, 19, 20, 21, 24, 26, 27, 32], "One": [3, 11, 14, 19, 24], "per": [3, 4, 5, 12, 20, 25, 28, 29, 30], "raw": [3, 18], "xi": 3, "xj": 3, "format": [3, 4, 5, 7, 10, 11, 13, 14, 16, 18, 19, 20, 25, 26, 27, 28, 29, 30, 31, 32], "draw": [3, 27, 28, 32], "board": 3, "l": 3, "qx": 3, "q": [3, 30], "some": [4, 5, 7, 8, 10, 11, 12, 13, 14, 17, 18, 20, 23, 24, 26, 27, 31], "sever": [4, 5, 6, 11, 12, 20, 24], "client": [4, 11, 24], "singl": [4, 5, 6, 8, 11, 12, 14, 16, 18, 23, 24], "truck": [4, 24], "consist": [4, 12, 24, 25, 28, 29, 30], "given": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 27, 28, 29, 30], "quantiti": [4, 24], "product": [4, 12, 24, 30], "certain": [4, 12, 13, 20, 24], "type": [4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 18, 19, 20, 24, 31], "A": [4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 16, 18, 20, 21, 24, 27, 31], "load": [4, 5, 11, 12, 24, 30], "least": [4, 7, 8, 11, 12, 13, 14, 16], "one": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31], "specif": [4, 5, 10, 11, 12, 13, 14, 16, 20, 24, 26, 28, 29, 30], "handl": [4, 11, 13, 18, 20, 23, 24], "three": [4, 24, 27], "There": [4, 8, 11, 12, 14, 16, 17, 23, 24, 26, 27], "possibl": [4, 5, 7, 8, 11, 12, 13, 18, 20, 23], "combin": [4, 8, 12, 13, 19], "6": [4, 5, 8, 10, 12, 26, 27, 31, 32], "cost": [4, 7, 9, 12, 24, 26], "b": [4, 6, 8, 11, 12, 24], "determin": [4, 6, 12, 13, 16, 24, 29], "capac": [4, 7, 12, 24, 30], "deliveri": 4, "custom": [4, 5, 7, 10, 11, 13, 16, 24], "both": [4, 12, 13, 18, 21, 24], "must": [4, 5, 6, 8, 11, 12, 13, 14, 15, 16, 17, 20, 24, 25, 26, 27, 28, 29], "being": [4, 8, 12, 13, 18, 20, 24], "criterion": [4, 12, 14, 24], "list": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30], "tupl": [4, 5, 6, 8, 9, 11, 12, 14, 18, 19, 23, 26, 27], "max": [4, 5, 8, 12, 14, 17, 18, 23, 25, 26, 28, 29, 30, 31], "truck_configur": 4, "volum": 4, "customer_ord": 4, "transit": [4, 5, 8, 12, 19, 23, 24, 31], "tcost": 4, "mean": [4, 5, 7, 11, 12, 13, 14, 16, 17, 18, 19, 26, 27, 31], "modifi": [4, 7, 11, 13, 16], "configuration_transition_cost": 4, "15": [4, 12, 13, 19, 26, 27, 31, 32], "compat": [4, 5, 8, 11, 14], "allowedcontainerconfig": 4, "accept": [4, 5, 20], "allowed_container_config": 4, "nbtruckconfig": 4, "len": [4, 27, 31, 32], "maxtruckconfigload": 4, "tc": 4, "truckcost": 4, "maxload": 4, "nborder": 4, "nbcustom": 4, "co": [4, 14], "producttyp": 4, "increas": [4, 12, 13], "maxdeliveri": 4, "truckconfig": 4, "which": [4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 20, 21, 23, 24, 25, 28, 29, 30], "nbdeliveri": 4, "identif": [4, 26, 27], "assign": [4, 5, 8, 11, 12, 13, 14, 18, 23, 24, 26, 27], "customerofdeliveri": 4, "customeroftruck": 4, "transitioncost": 4, "1000": [4, 13], "auxvar": 4, "allowed_assign": [4, 8, 12, 23], "constrain": [4, 12, 24, 30, 31], "pack": [4, 12, 23], "element": [4, 5, 11, 12, 13, 14, 16, 18, 19, 20, 23, 26, 27], "configofcontain": 4, "onli": [4, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 23, 24, 27], "non": [4, 8, 11, 12, 13, 24, 27], "end": [4, 5, 6, 8, 9, 12, 13, 14, 16, 17, 18, 19, 25, 26, 27, 28, 30, 31, 32], "domin": 4, "keep": [4, 7, 13], "regroup": 4, "ct": 4, "logical_and": [4, 5, 12, 23], "p": [4, 12, 14, 26, 27], "object": [4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 26, 27, 28, 29, 31], "first": [4, 7, 8, 9, 12, 13, 14, 17, 18, 19, 20, 21, 23, 25, 28, 29, 30], "second": [4, 11, 12, 13, 14, 17, 18, 20, 30], "sum": [4, 5, 12, 20, 23, 27, 30, 32], "minimize_static_lex": [4, 12, 14, 23], "strategi": [4, 7, 12, 13, 16], "set_search_phas": [4, 11, 12, 32], "search_phas": [4, 12, 23, 32], "logperiod": [4, 5, 11, 13, 16, 25, 32], "3000": 4, "is_solut": [4, 14, 16, 17], "oval": 4, "get_objective_valu": [4, 14], "ld": 4, "get_valu": [4, 6, 8, 9, 14, 31], "2d": 4, "config": [4, 5, 11, 16, 20, 22, 23], "item": 4, "unitari": [5, 6], "assembl": 5, "them": [5, 6, 11, 12, 13, 14, 20, 22, 23], "start": [5, 6, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 22, 24, 25, 26, 27, 28, 29], "point": [5, 6, 10, 11, 12, 13, 14, 24], "new": [5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "detail": [5, 20, 21, 23, 24, 32], "avail": [5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 23, 25, 26, 28, 29, 30], "here": [5, 6, 8, 10, 12, 13, 17, 18, 20, 21, 22], "implement": [5, 6, 8, 11, 12, 14, 15, 16, 17, 18, 20, 23, 24], "locat": [5, 7, 11, 13, 21, 27], "basic": [5, 8, 10, 13, 18, 21], "describ": [5, 7, 8, 10, 11, 12, 13, 16, 29], "py": [5, 7, 11, 20, 21, 23, 24], "class": [5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 20, 23], "cpoexpr": [5, 8, 9, 11, 14, 23], "root": [5, 8, 9, 11, 12, 14, 18, 21, 23], "cpointvar": [5, 8, 14, 23], "cpointervalvar": [5, 8, 14, 23], "cposequencevar": [5, 6, 8, 14, 23], "cpotupleset": 5, "cpotransitionmatrix": [5, 8, 19, 23], "auxiliari": 5, "repres": [5, 6, 8, 9, 11, 12, 14, 16, 18, 19, 20, 22, 23], "cpostepfunct": [5, 9, 23, 26, 30], "cposegmentfunct": 5, "schedul": [5, 8, 10, 11, 13, 19, 23, 25, 26, 27, 28, 29, 30, 31], "directli": [5, 7, 11, 13, 14, 15, 16, 23], "instead": [5, 6, 11, 12, 14, 16, 18, 19, 20], "constructor": [5, 6, 8, 9, 11, 13, 14, 16, 17, 18], "defin": [5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 23, 32], "integer_var_dict": [5, 8, 23], "dictionari": [5, 8, 10, 11, 13, 14, 16, 18, 20], "binary_var": [5, 8, 23], "binari": [5, 8, 12, 20], "domain": [5, 8, 9, 10, 11, 12, 13, 14, 16], "binary_var_list": [5, 8, 23], "binary_var_dict": [5, 8, 23], "interval_var": [5, 8, 11, 23, 25, 26, 27, 28, 29, 30, 31, 32], "interv": [5, 6, 8, 9, 11, 12, 13, 14, 18, 19, 20, 23, 25, 26, 27, 28, 29, 30, 31], "interval_var_list": [5, 8, 23], "interval_var_dict": [5, 8, 23], "sequence_var": [5, 8, 23, 31], "sequenc": [5, 6, 8, 11, 12, 13, 14, 16, 18, 19, 23, 24, 25, 26, 27, 28, 29, 31], "transition_matrix": [5, 8, 12, 23], "empti": [5, 11, 12, 14, 15, 16, 17, 18], "matrix": [5, 8, 12, 19, 23], "tuple_set": [5, 8, 23], "state_funct": [5, 8, 23], "state": [5, 8, 11, 12, 13, 14, 16, 23], "than": [5, 7, 8, 11, 12, 13, 14, 16, 20], "we": [5, 12, 14], "also": [5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 20, 23, 25, 32], "invok": [5, 9, 11, 13, 15, 16], "howev": [5, 6, 11, 12, 14, 16, 24], "thei": [5, 8, 11, 13, 17, 20, 24, 31], "actual": [5, 7, 11, 12, 13, 15, 16, 17, 20, 31], "follow": [5, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 19, 20, 23, 24, 25, 29, 30, 32], "bool": 5, "convert": [5, 6, 8, 10, 12, 18, 20], "boolean": [5, 6, 7, 8, 10, 11, 12, 18], "constant": [5, 6, 8, 9, 11, 12, 13, 17, 18, 19, 23], "int": [5, 6, 9, 19, 20, 25, 26, 27, 28, 29, 30], "float": [5, 6, 9, 10, 11, 12, 13, 14, 18, 32], "bool_": 5, "int_": 5, "intc": 5, "intp": 5, "int8": 5, "int16": 5, "int32": 5, "int64": 5, "uint8": 5, "uint16": 5, "uint32": 5, "uint64": 5, "float_": 5, "float16": 5, "float32": 5, "float64": 5, "ndarrai": 5, "panda": [5, 18, 20], "seri": [5, 18], "note": [5, 6, 8, 11, 12, 13, 14, 16, 17, 19, 20, 24], "duplic": [5, 11, 12], "when": [5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24], "construct": [5, 8, 11, 12, 16, 23, 24], "intern": [5, 7, 8, 10, 13, 14, 18, 20], "cach": [5, 6, 7, 8, 18], "mechan": [5, 7, 13], "identifi": [5, 11, 12, 14, 16, 18, 32], "name": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "java": [5, 12], "predefin": [5, 8, 17], "symbol": [5, 6, 8, 13, 18], "cannot": [5, 6, 12, 14, 20, 29], "logical_or": [5, 12, 23], "logical_not": [5, 12, 23], "built": [5, 7, 12, 16], "ab": [5, 12, 14, 19, 23], "min": [5, 8, 12, 14, 20, 23], "ani": [5, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 29], "overwritten": [5, 11, 14, 17], "safe": [5, 18], "call": [5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24], "none": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20], "allow": [5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23], "particular": [5, 8, 9, 11, 12, 13, 14, 16, 17, 19, 23], "level": [5, 7, 11, 12, 13, 18, 19, 20, 24, 27], "shorten": 5, "recommend": [5, 11, 12], "prefer": [5, 7, 12, 14], "To": [5, 6, 7, 8, 9, 11, 14, 17, 21, 32], "simplifi": [5, 12, 23], "match": [5, 7, 18], "creation": [5, 11, 14, 16, 18, 23], "tabl": [5, 20], "indic": [5, 6, 7, 8, 11, 12, 13, 14, 16], "plu": [5, 12, 14, 16, 23], "minu": [5, 12, 23], "unary_minu": 5, "mod": [5, 12, 18, 23], "int_div": [5, 10, 12, 23], "float_div": [5, 12, 23], "equal": [5, 6, 8, 9, 11, 12, 13, 14, 16, 18, 20, 21, 23], "diff": [5, 12, 23], "greater_or_equ": [5, 12, 23], "less_or_equ": [5, 12, 23], "greater": [5, 11, 12, 13, 16, 23], "less": [5, 12, 14, 23], "caution": 5, "logic": [5, 12, 18], "have": [5, 8, 9, 10, 11, 12, 13, 14, 19, 21, 24, 25, 27, 31], "prioriti": [5, 8, 12], "usual": [5, 11, 12, 13, 14, 23], "make": [5, 11, 12, 13, 14, 16, 23, 26, 27], "sure": [5, 11, 12, 14], "alwai": [5, 7, 8, 9, 12, 14, 18], "parenthesi": 5, "ambigu": 5, "If": [5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 18, 19, 20, 21], "neg": [5, 8, 12, 13, 24, 27], "modulo": [5, 12], "ha": [5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 24, 26, 27, 29, 31, 32], "behavior": [5, 7, 13, 16], "languag": 5, "like": [5, 11, 12, 13, 16, 20], "case": [5, 6, 7, 8, 9, 11, 12, 13, 14, 16, 18, 19, 20, 23, 25], "ad": [5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23], "method": [5, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 23], "condens": 5, "nqueen": 5, "shortest": 5, "indirectli": 5, "conflict": [5, 7, 11, 13, 14, 16, 17], "mai": [5, 6, 7, 11, 12, 13, 14, 16, 17, 20, 23, 24, 29], "propos": [5, 14, 25, 29], "similar": [5, 24, 25, 29], "il": 5, "made": [5, 7, 12, 13, 16], "itself": [5, 11, 12, 16], "emb": [5, 24], "conveni": [5, 12, 16], "becaus": [5, 8, 11, 12, 14, 18, 25], "impos": [5, 12], "everi": [5, 6, 7, 11, 12, 13, 15, 16, 17], "elimin": [5, 12, 13], "collis": 5, "builtin": [5, 12, 14], "done": [5, 6, 11, 12, 13, 14, 16, 23], "multipl": [5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 20, 23, 24], "transform": [5, 7], "submiss": 5, "anoth": [5, 8, 11, 12, 13, 18], "interact": [5, 7, 16, 20], "descript": [5, 23], "how": [5, 6, 7, 12, 13, 24], "section": [5, 7, 21], "assum": [5, 9, 12, 13], "12": [5, 11, 12, 13, 14, 16, 19, 21, 26, 31], "been": [5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20], "complet": [5, 7, 8, 9, 10, 11, 12, 14, 16, 24, 26, 28, 29], "correctli": [5, 13], "process": [5, 6, 11, 13, 14, 16, 17, 20, 24, 25, 28, 29, 31], "alreadi": [5, 6, 7, 8, 12, 14, 18, 19, 20], "put": [5, 6, 11, 20, 31], "system": [5, 7, 18], "path": [5, 7, 12, 16, 18, 25, 28, 29, 30], "check": [5, 6, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 21], "cpoptim": [5, 7], "ex": [5, 7], "command": [5, 19, 21, 24], "prompt": [5, 21], "print_solut": [5, 14, 25, 26, 27, 28, 29, 30, 31, 32], "return": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 19, 20, 26, 27, 31], "cposolveresult": [5, 11, 14, 15, 16, 17, 23], "view": 5, "valu": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 31], "necessari": [5, 7, 11, 12, 13, 14, 16, 18, 23, 24], "accessor": [5, 14], "output": [5, 7, 8, 10, 11, 13, 14, 16, 18, 20, 24], "argument": [5, 6, 8, 10, 11, 12, 13, 16, 17, 18, 19, 20], "context": [5, 6, 7, 11, 13, 16, 17, 18, 20, 23], "param": [5, 6, 7, 10, 11, 13, 16, 18], "cpoparamet": [5, 7, 11, 13, 14, 16, 23], "replac": [5, 11, 12, 14, 16, 17, 18, 20, 23], "leaf": [5, 11, 16], "global": [5, 6, 7, 11, 12, 14, 16, 18, 27], "subcontext": 5, "pass": [5, 6, 11, 14, 18, 19, 20], "either": [5, 8, 11, 12, 13, 14, 24, 31], "previou": [5, 11, 12, 14, 16, 18, 23, 25, 28], "individu": [5, 8, 11, 12, 13, 14, 16], "properti": [5, 7, 8, 13, 20], "expos": 5, "declar": [5, 6, 7, 8, 10, 12, 18], "80": 5, "5000": [5, 13], "equival": [5, 8, 11, 12, 13, 14, 16, 20], "structur": [5, 8, 11, 14, 18, 19, 23], "dedic": [5, 11, 13, 23], "cpointvarsolut": [5, 6, 14, 23], "cpointervalvarsolut": [5, 6, 14, 19, 23], "cposequencevarsolut": [5, 6, 14, 19, 23], "cpostatefunctionsolut": [5, 14, 19, 23], "look": 5, "manual": [5, 22], "what": [5, 6, 8, 12, 14, 23], "mani": [5, 6, 12, 13, 23], "shortcut": 5, "simpler": 5, "code": [5, 7, 12, 13, 16, 20, 24], "__nonzero__": 5, "__bool__": 5, "test": [5, 14, 22], "present": [5, 8, 11, 12, 14, 18, 20], "squar": [5, 8, 12, 23, 24, 32], "bracket": 5, "vname": 5, "absent": [5, 8, 11, 12, 14, 18], "var": [5, 8, 12, 14], "kei": [5, 8, 11, 13, 14, 18, 20, 26], "docplexcloud": [5, 20, 23], "info": [5, 14, 20], "export_model": [5, 11], "demonstr": 5, "workspac": 5, "cpopython": 5, "x0": 5, "intvar": [5, 6, 14], "x1": [5, 8, 9], "x2": [5, 7, 8, 9], "x3": 5, "x4": 5, "x5": 5, "x6": 5, "x7": 5, "alldiff": [5, 13], "out": [5, 8, 10, 11, 13, 14, 18], "specifi": [5, 6, 7, 8, 9, 11, 12, 13, 14, 19, 20, 24, 28, 31], "stream": [5, 7, 8, 10, 11, 14, 18, 20], "short_output": 5, "true": [5, 6, 7, 8, 10, 11, 12, 14, 16, 17, 18, 19, 20, 23, 27, 31], "form": [5, 6, 11, 12, 13], "x_0": 5, "x_1": 5, "x_2": 5, "x_3": 5, "x_4": 5, "x_5": 5, "x_6": 5, "x_7": 5, "get_cpo_str": [5, 11], "As": [5, 6, 11, 12, 20, 21, 23], "base": [5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 20, 24], "group": [5, 14, 23, 24, 29], "hierarch": 5, "characterist": 5, "It": [5, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 23], "address": 5, "enabl": [5, 6, 7, 8, 11, 16, 18, 19, 21], "represent": [5, 7, 8, 10, 11, 14, 18, 20], "doe": [5, 6, 8, 10, 11, 12, 13, 14, 16, 18, 19, 20], "inherit": 5, "parent": [5, 9, 16, 18], "procedur": 5, "next": [5, 9, 12, 13, 16, 18, 24, 31], "organ": [5, 30], "relat": [5, 8, 10, 12, 14, 16], "subclass": 5, "util": [5, 14, 17, 22, 23, 26, 27], "abov": [5, 7, 12, 13, 17], "static": 5, "veri": [5, 7, 13, 20, 24, 31], "simpl": [5, 6, 11, 18, 20, 24], "persist": [5, 18], "visibl": [5, 23], "pythonpath": [5, 7, 21], "cpo_config": [5, 7], "cpo_config_": [5, 7], "hostnam": [5, 7], "want": [5, 21], "host": 5, "overwrit": [5, 11, 16], "normal": [5, 11, 12, 13], "instruct": 5, "trace_cpo": [5, 7, 11, 16], "trace_log": [5, 7, 11, 16], "fals": [5, 6, 7, 8, 10, 11, 12, 14, 16, 17, 18, 23], "evalu": [5, 12, 23], "insid": [5, 12, 13, 18, 20, 23], "statement": 5, "includ": [5, 6, 7, 8, 9, 11, 12, 13, 14, 16, 18, 20, 21], "updat": [5, 13, 20, 26], "run": [5, 6, 7, 11, 13, 15, 16, 18, 20, 22, 23], "standard": [5, 7, 11, 12, 13, 14, 16, 18, 21, 24], "log_output": [5, 7, 18], "open": [5, 10, 11, 13, 14, 18, 20, 21, 24, 25, 28, 29, 30], "mode": [5, 8, 13, 18, 20], "w": [5, 26, 27], "0x00000000023b20c0": 5, "visu_en": 5, "add_source_loc": [5, 7, 11], "dump_directori": [5, 7], "tmp": 5, "worker": [5, 6, 8, 11, 13, 14, 16, 20, 23, 24, 26, 27], "add_log_to_solut": [5, 7, 11, 16], "agent": [5, 11, 14, 16, 23], "enable_undocumented_param": [5, 7, 11, 16], "log_prefix": [5, 7], "class_nam": 5, "solver_loc": 5, "cposolverloc": 5, "execfil": [5, 7, 16], "angel": 5, "summari": [5, 23], "transmit": 5, "explicit": [5, 11, 12, 19], "By": [5, 6, 7, 9, 12, 13, 14], "without": [5, 6, 11, 12, 13, 18], "explicitli": [5, 6, 8, 11, 12, 14], "addit": [5, 7, 11, 12, 13, 14, 20, 29], "correl": [5, 7], "line": [5, 7, 11, 13, 18, 19, 25, 28, 29, 30], "directori": [5, 7, 18, 20, 21, 24], "store": [5, 7, 13, 14, 18, 19, 20], "purpos": [5, 7, 12, 13, 14, 24, 31], "instanc": [5, 6, 7, 8, 9, 11, 12, 13, 14, 18, 19, 20, 24], "public": [5, 7, 11, 13, 16, 18], "trace": [5, 7], "befor": [5, 7, 11, 12, 13, 16, 17, 18, 19, 20, 23, 24, 26, 27], "submit": [5, 7, 11, 23, 24], "content": [5, 7, 14, 18, 19, 20, 22], "full": [5, 7, 11, 14, 18], "execut": [5, 6, 11, 12, 13, 18, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31], "suppos": [5, 12, 14], "dynam": [5, 13, 18], "express": [6, 7, 9, 10, 11, 12, 13, 14, 17, 22, 23, 24, 26, 27, 32], "numer": [6, 12, 14], "analyt": 6, "known": [6, 9], "formul": [6, 13], "classic": [6, 24, 28, 32], "give": [6, 7, 8, 11, 12, 13, 14], "featur": [6, 7, 8, 11, 13, 20, 21, 22, 23], "cpoblackboxfunct": [6, 11, 23], "auto": [6, 11, 13], "alloc": [6, 18, 19, 26, 27], "default": [6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24], "option": [6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 20, 24, 27, 31], "parallel": [6, 11, 13], "string": [6, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20], "descriptor": [6, 8, 10, 11, 13, 14, 17], "cpotyp": [6, 8], "catalog": 6, "type_int": 6, "type_intvar": 6, "intexpr": [6, 12], "type_intexpr": 6, "type_float": 6, "floatexpr": 6, "type_floatexpr": 6, "intervalvar": [6, 8, 14], "type_intervalvar": 6, "sequencevar": [6, 14], "type_sequencevar": 6, "intarrai": 6, "type_intarrai": 6, "intvararrai": 6, "type_intvararrai": 6, "intexprarrai": 6, "type_intexprarrai": 6, "floatarrai": 6, "type_floatarrai": 6, "floatexprarrai": 6, "type_floatexprarrai": 6, "intervalvararrai": 6, "type_intervalvararrai": 6, "sequencevararrai": 6, "type_sequencevararrai": 6, "comput": [6, 11, 12, 14, 16, 17, 18, 21, 22, 27], "smallest": [6, 12], "common": [6, 7, 12], "lambda": [6, 11, 19], "take": [6, 8, 11, 12, 13, 14, 16, 17, 19, 24, 26, 27], "definit": [6, 8, 12, 23], "args_with_var": 6, "cpoxxxvarsolut": 6, "constitut": [6, 8], "get_var": [6, 8, 14], "error": [6, 7, 10, 11, 12, 13, 16, 18, 20], "occur": [6, 11, 12, 13, 16], "dure": [6, 7, 8, 11, 12, 13, 16, 29], "forward": 6, "fail": [6, 11, 13, 14, 16], "thrown": [6, 18], "propag": [6, 11, 12, 13, 14, 16], "rethrow": 6, "exit": 6, "happen": [6, 8, 14, 20], "concurr": 6, "support": [6, 10, 11, 12, 18, 20], "real": 6, "multi": [6, 13, 18], "thread": [6, 11, 13, 16, 18, 20], "interpret": [6, 7, 12, 14, 18, 20, 21], "lock": [6, 18], "moin": 6, "globalinterpreterlock": 6, "introduc": [6, 10, 13], "overhead": 6, "servic": [6, 11, 20, 22], "design": [6, 16], "mutual": [6, 11, 14, 16], "exclus": [6, 12], "chang": [6, 7, 8, 9, 11, 13, 16, 18, 22, 24], "set_parallel_ev": 6, "local": [6, 11, 13, 16, 19, 20, 22, 23, 24], "onc": [6, 8, 11, 13, 20, 24, 28], "simpli": [6, 11, 16], "show": [6, 8, 19, 23, 25, 26, 27, 28, 29, 30, 31, 32], "bbf": [6, 11], "y": [6, 12, 14, 20, 26, 27, 32], "v1": [6, 8, 9, 18], "step": [6, 9, 11, 12, 14, 15, 16, 17, 19, 23], "impl": 6, "dimens": [6, 32], "argtyp": 6, "bounds_paramet": 6, "caches": 6, "globalcach": 6, "oper": [6, 8, 10, 11, 12, 13, 17, 18, 20, 21, 23, 24, 25, 28, 29], "fulli": [6, 12, 14, 20], "pars": [6, 10, 11, 13, 18], "regist": [6, 11], "prior": [6, 11, 16, 24], "abl": [6, 12, 17], "letter": 6, "digit": [6, 18], "lower": [6, 8, 11, 12, 14, 18], "otherwis": [6, 8, 10, 11, 12, 13, 14, 16, 18, 19], "unknown": [6, 8, 11, 13, 14, 18], "inf": [6, 8, 12], "include_var": 6, "forc": [6, 11, 12, 13, 14, 25, 28], "zero": [6, 8, 9, 12], "restrict": [6, 11, 12, 14, 20], "manag": [6, 23], "build_model_cal": 6, "arg": [6, 8, 10, 12, 19], "eval": [6, 12], "get_arg_typ": 6, "get_cache_s": 6, "get_dimens": 6, "get_eval_count": 6, "get_implement": 6, "has_implement": 6, "is_global_cach": 6, "is_parallel_ev": 6, "oherwis": 6, "reset_eval_count": 6, "reset": [6, 13, 18], "set_cache_s": 6, "set_dimens": 6, "dim": 6, "e": [6, 12, 13, 14, 18, 24, 26, 29, 30], "set_global_cach": 6, "glob": 6, "set_implement": 6, "set_nam": [6, 8], "nm": [6, 31], "par": 6, "cpoblackboxfunctioncal": [6, 23], "oprnd": [6, 8], "cpofunctioncal": [6, 8, 23], "node": [6, 8, 12, 13, 18], "operand": [6, 8], "api": [7, 14, 16, 22], "top": [7, 11, 12, 14], "handler": [7, 20], "NOT": [7, 12], "pyton": 7, "main": [7, 12, 14, 18], "current": [7, 8, 10, 11, 12, 16, 18, 19, 20, 22], "final": 7, "read": [7, 10, 13, 18, 20, 22, 25, 28, 29, 30], "obtain": [7, 11, 16], "those": [7, 8, 11, 12, 13, 14, 16], "consult": [7, 14], "disabl": [7, 11, 13], "verbos": [7, 11, 13, 18], "control": [7, 11, 13, 16], "rais": [7, 8, 10, 11, 13, 14, 16, 18, 20], "easier": [7, 12, 14], "debug": [7, 20], "length_for_alia": [7, 11], "associ": [7, 8, 11, 12, 13, 14, 15, 18, 20, 23], "shorter": [7, 11], "alia": [7, 8, 11, 14], "whose": [7, 8, 11, 12, 13, 14, 16, 18, 20, 24, 30], "longer": [7, 8, 13], "origin": [7, 15, 17, 18, 19, 20], "reduc": [7, 8, 11, 12, 13, 16], "still": [7, 12], "retriev": [7, 8, 11, 12, 13, 14, 15, 16, 18, 20, 21, 22, 24, 31], "name_all_constraint": [7, 11], "mandatori": [7, 11, 18], "refin": [7, 11, 13, 14, 16, 17], "function": [7, 8, 11, 13, 14, 16, 18, 19, 20, 22, 23, 26, 27, 30], "anywai": 7, "again": [7, 11, 16], "proper": 7, "big": [7, 11, 18], "factorize_express": 7, "factor": [7, 13], "model_nam": 7, "sort_nam": 7, "precis": [7, 8, 12], "sort": [7, 9, 11, 12, 14, 18], "alphabet": [7, 18], "x11": 7, "after": [7, 8, 9, 11, 12, 13, 14, 17, 20, 25, 28], "10000": [7, 27, 29], "maximum": [7, 8, 11, 12, 13, 17, 20, 29], "speed": [7, 13, 24, 31, 32], "up": [7, 9, 12, 13, 18, 32], "convers": [7, 8, 18], "activ": [7, 8, 9, 11, 12, 13, 16, 19, 24, 30], "o": [7, 9, 20, 21, 25, 28, 29, 30], "xxx": 7, "remot": 7, "consid": [7, 8, 10, 11, 12, 14, 16, 18, 20], "notebook": [7, 18, 24], "ipykernel": 7, "detect": [7, 13], "interest": [7, 11], "add_conflict_as_cpo": 7, "child": [7, 14], "attribut": [7, 11, 13, 14, 16, 18, 22], "prefix": [7, 8, 11, 17, 18], "messag": [7, 10, 13, 16, 18, 19], "compon": 7, "below": [7, 24], "libfil": 7, "lib_cpo_solver_": 7, "dll": 7, "environ": [7, 18, 19, 22, 23], "ld_library_path": 7, "dyld_library_path": 7, "pattern": 7, "recent": [7, 11], "select": [7, 11, 12, 24, 27], "obvious": 7, "won": 7, "loss": 7, "get_default": [7, 23], "set_default": [7, 23], "ctx": [7, 13, 18], "becom": [7, 11, 12, 13, 16], "program": [8, 11, 12, 18, 20, 23], "cpostatefunct": [8, 14, 23], "variou": [8, 11, 14, 16, 18, 20, 23], "factori": [8, 11], "do": [8, 12, 13], "moreov": 8, "iter": [8, 11, 12, 13, 14, 16, 17, 18], "cpoalia": [8, 23], "expr": [8, 10, 11, 12, 14], "target": [8, 10, 11, 14, 18], "cpoboolvar": [8, 23], "dom": 8, "is_binari": 8, "is_bool_var": 8, "super": [8, 14, 17], "compar": [8, 11, 12, 18], "self": [8, 20, 24], "__eq__": [8, 18], "overload": [8, 11, 12, 14, 18], "get_max_depth": 8, "depth": [8, 13], "get_node_count": [8, 23], "total": [8, 11, 12, 13, 14, 16, 26, 27], "count": [8, 12, 13, 23], "atom": [8, 12, 18, 23], "sub": [8, 11, 12, 18, 24, 32], "get_prior": 8, "extend": [8, 11, 13, 14, 15, 16, 17, 18, 32], "get_typ": 8, "has_nam": 8, "is_kind_of": 8, "tp": [8, 24, 31], "kind": 8, "is_typ": 8, "xtyp": 8, "expect": [8, 11, 16, 18], "is_vari": 8, "pretty_print": [8, 23], "mxdepth": 8, "mxarg": 8, "adsiz": 8, "indent": [8, 18], "curdepth": 8, "pretti": 8, "fluent": 8, "mynam": 8, "possibli": [8, 11, 13, 14, 17, 18], "cpofloatvar": [8, 14, 23], "cpovari": [8, 14, 23], "rtype": 8, "domain_contain": [8, 14], "whether": [8, 12, 13, 14, 18], "val": [8, 9, 12, 14, 18], "domain_iter": [8, 14], "semant": [8, 12, 14], "ident": [8, 11, 12, 14, 18], "get_domain": 8, "fix": [8, 11, 12, 14, 24, 25, 28], "get_domain_max": [8, 14, 23], "get_domain_min": [8, 14, 23], "lb": [8, 12], "set_domain": 8, "discret": [8, 14], "valid": [8, 12, 13, 14], "ub": [8, 12], "intens": [8, 12, 14, 26], "granular": 8, "presenc": [8, 12, 14, 18], "get_end": [8, 14, 30, 31, 32], "get_granular": 8, "scale": 8, "get_intens": 8, "stepfunct": 8, "get_length": [8, 14], "get_siz": [8, 14], "get_start": [8, 14, 18, 30, 32], "is_abs": [8, 14], "is_opt": [8, 14], "is_pres": [8, 14, 27], "set_abs": 8, "set_end": 8, "intv": 8, "set_end_max": 8, "mx": [8, 18], "set_end_min": 8, "mn": [8, 18], "minimum": [8, 11, 12], "set_granular": 8, "set_intens": 8, "set_length": 8, "set_length_max": 8, "set_length_min": 8, "set_opt": 8, "set_pres": 8, "set_siz": 8, "set_size_max": 8, "set_size_min": 8, "set_start": 8, "set_start_max": 8, "set_start_min": 8, "get_interval_vari": [8, 14], "trmtx": 8, "evolut": [8, 12], "over": [8, 9, 11, 12, 13, 16, 24, 30], "consecut": [8, 9, 12], "get_transition_matrix": 8, "set_transition_matrix": 8, "cpovalu": [8, 23], "no_overlap": [8, 12, 23, 24, 25, 26, 27, 28, 29, 31], "overlap": [8, 12, 25, 26, 27, 28, 29, 31], "deprec": [8, 11, 12, 13, 14, 16, 17, 18, 20], "set_valu": [8, 9, 14, 26], "width": [8, 12], "height": [8, 12], "get_all_valu": 8, "get_matrix": 8, "concaten": [8, 18], "from_stat": 8, "to_stat": 8, "abstract": [8, 12, 14, 15, 16, 17, 23], "default_integer_variable_domain": [8, 23], "9007199254740991": [8, 16], "default_interv": [8, 23], "4503599627370494": [8, 16], "infin": [8, 12, 13, 14, 23], "interval_max": [8, 23, 30, 31], "interval_min": [8, 9, 23, 30], "int_max": [8, 10, 12, 19, 23], "int_min": [8, 10, 12, 19, 23], "integerdomain": [8, 23], "negative_infin": [8, 23], "positive_infin": [8, 23], "ordereddict": 8, "build_cpo_expr": [8, 23], "cpoexcept": [8, 10, 11, 16, 18, 23], "build_cpo_expr_arrai": [8, 23], "larrai": 8, "build_cpo_transition_matrix": [8, 23], "transitionmatrix": 8, "build_cpo_tupleset": [8, 23], "tupleset": 8, "compare_express": [8, 23], "d": 8, "potenti": [8, 13], "extens": [8, 11, 12, 14, 18, 20, 24], "unus": 8, "someth": 8, "carri": [8, 13], "character": [8, 24, 28], "sometim": [8, 13, 19], "work": [8, 12, 13, 14, 20], "whole": [8, 14], "who": [8, 12, 24, 27], "weekend": 8, "hi": 8, "fridai": 8, "he": 8, "half": 8, "dai": [8, 14, 24, 26], "50": [8, 13, 19, 32], "man": 8, "span": [8, 12, 23], "just": [8, 11, 16, 17], "would": [8, 12], "wa": [8, 11, 12, 13, 14, 18], "situat": 8, "stepwis": [8, 9], "long": [8, 11, 12, 18, 19, 23], "enough": [8, 13, 18], "cover": [8, 12], "asiz": 8, "is_cpo_expr": [8, 23], "type_": 8, "szval": 8, "tset": 8, "essenti": [8, 10], "necessarili": [8, 24, 26, 27], "forbidden_assign": [8, 12, 23], "forbidden": [8, 12, 24, 31], "collect": [8, 23], "piecewis": [9, 12], "linear": [9, 12], "cpofunct": [9, 19, 23], "cposegmentedfunct": [9, 23], "segment": [9, 12, 19, 23, 30], "typ": [9, 18], "s0": 9, "v0": 9, "slope": [9, 12, 19], "abscissa": 9, "add_slop": 9, "f": [9, 12, 13, 18, 19], "add_valu": [9, 30], "copi": [9, 11, 14, 18, 20], "t": [9, 12, 26, 27, 30], "complex": [9, 11, 18], "set_slop": 9, "exclud": [9, 18], "segment0": 9, "typic": [9, 12, 13], "incur": 9, "date": [9, 11, 24, 25, 26, 28], "xmin": 9, "xmax": 9, "partit": 9, "colinear": 9, "merg": [9, 11], "vright": 9, "xleft": 9, "vleft": 9, "get_segment_list": 9, "effici": [9, 11, 12], "resourc": [9, 16, 24, 30], "special": [9, 11, 13, 17, 18, 25], "imag": [9, 24], "coupl": 9, "get_step_list": 9, "parser": [10, 11], "predic": [10, 11], "flatzinc": 10, "minizinc": 10, "download": [10, 21, 22], "spec": 10, "pdf": 10, "array_bool_and": 10, "array_bool_el": 10, "array_bool_or": 10, "array_bool_xor": 10, "array_float_el": 10, "array_int_el": 10, "array_set_el": 10, "array_var_bool_el": 10, "array_var_float_el": 10, "array_var_int_el": 10, "array_var_set_el": 10, "bool2int": 10, "bool_and": 10, "bool_claus": 10, "bool_eq": 10, "bool_eq_reif": 10, "bool_l": 10, "bool_le_reif": 10, "bool_lin_eq": 10, "bool_lin_l": 10, "bool_lt": 10, "bool_lt_reif": 10, "bool_not": 10, "bool_or": 10, "bool_xor": 10, "int_ab": 10, "int_eq": 10, "int_eq_reif": 10, "int_l": 10, "int_le_reif": 10, "int_lin_eq": 10, "int_lin_eq_reif": 10, "int_lin_l": 10, "int_lin_le_reif": 10, "int_lin_n": 10, "int_lin_ne_reif": 10, "int_lt": 10, "int_lt_reif": 10, "int_mod": 10, "int_n": 10, "int_ne_reif": 10, "int_plu": 10, "int_tim": 10, "int2float": 10, "float_ab": 10, "float_exp": 10, "float_ln": 10, "float_log10": 10, "float_log2": 10, "float_sqrt": 10, "float_eq": 10, "float_eq_reif": 10, "float_l": 10, "float_le_reif": 10, "float_lin_eq": 10, "float_lin_eq_reif": 10, "float_lin_l": 10, "float_lin_le_reif": 10, "float_lin_lt": 10, "float_lin_lt_reif": 10, "float_lin_n": 10, "float_lin_ne_reif": 10, "float_lt": 10, "float_lt_reif": 10, "float_max": 10, "float_min": 10, "float_n": 10, "float_ne_reif": 10, "float_plu": 10, "set_in": 10, "set_in_reif": 10, "all_different_int": 10, "subcircuit": 10, "count_eq_const": 10, "table_int": 10, "invers": [10, 12, 23], "lex_lesseq_bool": 10, "lex_less_bool": 10, "lex_lesseq_int": 10, "lex_less_int": 10, "int_pow": 10, "cumul": [10, 12, 32], "fznconstraint": [10, 23], "annot": [10, 12], "fznobject": [10, 23], "satisfi": [10, 12, 16], "maxim": [10, 11, 12, 18, 23, 24, 27], "fznparamet": [10, 23], "fznparser": [10, 23], "reader": [10, 18, 20], "fill": [10, 11, 12], "get_model": [10, 14, 16], "get_output_vari": 10, "cfile": [10, 18], "fznparserexcept": [10, 23], "parse_str": 10, "msg": [10, 16, 18, 20], "fznreader": [10, 23], "utf": [10, 14, 18], "encod": [10, 14, 18], "fznvariabl": [10, 23], "is_defin": 10, "is_introduc": 10, "is_output": 10, "princip": 11, "phase": [11, 23, 32], "releas": [11, 13, 14, 16], "appear": [11, 12, 17], "set_starting_point": [11, 14], "cposolv": [11, 14, 15, 16, 17, 23], "callabl": 11, "start_search": [11, 16, 17], "refine_conflict": [11, 14, 16, 17], "infeas": [11, 14, 16], "cporefineconflictresult": [11, 14, 16, 17, 23], "partial": [11, 12, 13, 14], "spent": [11, 12, 13, 14, 18], "conflictrefinertimelimit": [11, 13, 16], "logverbos": [11, 13], "quiet": [11, 13], "ters": [11, 13], "core": [11, 13, 20, 23], "searchtyp": [11, 12, 13, 16], "depthfirst": [11, 13, 16], "restart": [11, 13, 18], "multipoint": [11, 13], "iterativediv": [11, 13], "neighborhood": [11, 12, 13], "algorithm": [11, 13], "randomse": [11, 13], "seed": [11, 13, 16], "random": [11, 13, 16], "sfile": 11, "deriv": [11, 12, 16], "preserv": 11, "etc": [11, 16, 26, 27], "add_blackbox_funct": 11, "blackbox": [11, 22, 23], "auto_blackbox": 11, "add_constraint": 11, "add_kpi": 11, "perform": [11, 12, 13, 23], "kpi": [11, 13, 14], "qualiti": [11, 13], "wish": 11, "makespan": [11, 24, 28, 29, 30, 31], "task": [11, 24, 26, 27, 30, 31], "averag": [11, 12, 17], "job": [11, 14, 20, 24, 25, 28, 29, 30], "horizon": [11, 12, 13, 19], "re": [11, 13, 25, 26, 27, 28, 29, 30, 31, 32], "queri": 11, "export": [11, 13, 18], "cloud": [11, 22], "sent": [11, 15, 16], "period": [11, 13], "publish": [11, 14, 20], "add_paramet": 11, "kwarg": [11, 12, 13, 16, 18, 20], "yet": [11, 14], "add_search_phas": [11, 12], "sinc": [11, 12, 13, 14, 16, 19, 20], "add_solver_callback": 11, "cback": [11, 16], "callback": [11, 15, 16, 20], "cpocallback": [11, 15, 16, 23], "engin": [11, 12, 13, 15, 20, 21], "notifi": [11, 15, 16, 17], "about": [11, 13, 14, 15, 16, 17, 21, 22, 24], "add_solver_listen": 11, "lstnr": [11, 16], "listen": [11, 15, 16, 17, 23], "cposolverlisten": [11, 16, 17, 23], "check_equival": 11, "clone": [11, 13, 18], "deep": 11, "referenc": [11, 13], "physic": [11, 18], "deepcopi": 11, "create_empty_solut": 11, "cpomodelsolut": [11, 14, 19, 23], "create_solv": 11, "attach": [11, 20], "taken": [11, 12, 14, 16, 24, 26], "user": [11, 12, 14, 16, 20], "properli": [11, 16], "explain_failur": [11, 16], "ltag": [11, 16], "explain": [11, 16], "failur": [11, 12, 13, 16], "tag": [11, 13, 16], "reason": [11, 12, 13, 16], "logsearchtag": [11, 13, 16], "On": [11, 13, 14, 16, 20], "id": [11, 15, 16, 18, 28, 31], "cponotsupportedexcept": [11, 16, 18, 23], "export_as_cpo": 11, "thoss": 11, "impact": [11, 12], "renam": 11, "too": [11, 19], "text": [11, 18, 24, 32], "export_parameters_as_ops_fil": 11, "outfil": 11, "opl": [11, 13], "style": [11, 13, 19, 30], "op": [11, 13, 17], "noth": [11, 20], "get_all_express": 11, "loc": [11, 26, 27], "source_fil": 11, "get_all_vari": 11, "goe": 11, "across": [11, 19], "slow": 11, "get_blackbox_funct": 11, "compil": 11, "mstr": 11, "get_format_vers": 11, "set_format_vers": 11, "get_kpi": [11, 14], "get_modeling_dur": 11, "durat": [11, 16, 24, 25, 28, 29, 30, 31], "undefin": [11, 12], "get_named_expressions_dict": 11, "get_object": 11, "satisfact": 11, "get_objective_express": 11, "get_optimization_express": 11, "get_paramet": [11, 14, 16, 20, 23], "get_source_fil": 11, "get_starting_point": 11, "get_statist": 11, "statist": [11, 16], "cpomodelstatist": [11, 23], "import_model": 11, "fzn": [11, 22, 23], "lp": 11, "fzn_parser": [11, 22, 23], "compress": [11, 18], "zip": [11, 21, 24], "gzip": [11, 18], "input": [11, 12, 13, 18, 20, 25, 28, 29, 30], "gz": 11, "import_model_str": 11, "cpostr": 11, "is_maxim": 11, "is_minim": 11, "is_satisfact": 11, "merge_with_paramet": 11, "extern": [11, 19, 24, 32], "print_inform": 11, "write_inform": 11, "cnstr": 11, "reduct": [11, 12, 13, 16], "turn": [11, 13, 16], "continu": [11, 12, 16, 18], "until": [11, 16, 18], "advanc": [11, 13, 22, 23], "watson": [11, 20], "learn": [11, 20, 24], "read_ops_fil": [11, 13], "infil": [11, 13], "overridden": 11, "now": 11, "within": [11, 12, 14, 16], "help": [11, 12, 16, 22], "caus": [11, 14, 16], "subset": [11, 12, 14, 16], "contradictori": [11, 14, 16], "remov": [11, 12, 13, 14, 16, 18, 20, 26], "consequ": [11, 14, 16], "repair": [11, 14, 16], "guarante": [11, 14, 16, 20], "feasibl": [11, 12, 13, 14, 16, 24], "remain": [11, 12, 13, 14, 16], "conflictrefinerbranchlimit": [11, 13, 16], "conflictrefinerfaillimit": [11, 13, 16], "conflictrefineriterationlimit": [11, 13, 16], "conflictrefineronvari": [11, 13, 16], "infinit": [11, 16], "previous": [11, 16], "attempst": 11, "ones": [11, 12, 13, 16, 19, 24, 27], "ignor": [11, 12, 13, 20], "remove_all_kpi": 11, "remove_express": 11, "lexpr": [11, 12], "occurr": [11, 12, 14, 18], "remove_kpi": 11, "remove_solver_callback": 11, "add_callback": [11, 15, 16], "remove_solver_listen": 11, "add_listen": [11, 16, 17], "replace_express": 11, "oexpr": 11, "nexpr": 11, "tree": [11, 12], "comparison": 11, "run_se": [11, 16], "nbrun": [11, 16], "cporunresult": [11, 14, 16, 23], "stop": [11, 14, 16, 17, 20], "accord": [11, 12, 14, 16, 20], "condit": [11, 12, 16, 17, 23], "ver": 11, "reject": 11, "checket": 11, "set_paramet": 11, "stpoint": 11, "could": 11, "spars": 11, "domain_min": [11, 12, 23], "domain_max": [11, 12, 23], "add_integer_var_solut": [11, 14], "add_interval_var_solut": [11, 14], "stp": 11, "myprivateparam": [11, 16], "myvalu": [11, 16], "act": [11, 16], "loop": [11, 12, 16], "lsol": 11, "sol": [11, 14, 16], "interrupt": [11, 16, 29], "end_search": [11, 16], "json": [11, 18, 20], "get_number_of_constraint": [11, 14], "get_number_of_express": 11, "get_number_of_vari": 11, "to_json": 11, "Not": [11, 14], "docloud": 11, "usag": [11, 13, 14, 18], "begin": [11, 12, 13, 18], "textual": [12, 24], "xxxx": 12, "contribut": 12, "briefli": 12, "arithmet": 12, "unari": 12, "divis": 12, "absolut": [12, 13, 18], "logarithm": 12, "expon": [12, 23], "exponenti": 12, "ceil": [12, 23, 26, 27], "upward": 12, "nearest": 12, "floor": [12, 23], "down": 12, "trunc": [12, 23], "truncat": 12, "part": [12, 13, 20], "sgn": [12, 23], "sign": 12, "AND": 12, "OR": 12, "inequ": 12, "count_differ": [12, 23], "scal_prod": [12, 23], "scalar": 12, "vector": 12, "all_min_dist": [12, 23], "if_then": [12, 23], "e1": 12, "e2": 12, "standard_devi": [12, 23], "deviat": 12, "slope_piecewise_linear": [12, 23], "break": [12, 13], "coordinate_piecewise_linear": [12, 23], "bool_abstract": [12, 23], "maintain": 12, "distribut": [12, 13, 23, 24], "calcul": [12, 14, 16], "lexicograph": [12, 23], "strict_lexicograph": [12, 23], "strictli": [12, 13], "k": [12, 13, 18, 28], "strong": [12, 23], "encourag": 12, "produc": [12, 13], "stronger": [12, 13], "higher": [12, 13, 14, 21], "infer": [12, 13, 23], "maximize_static_lex": [12, 14, 23], "start_of": [12, 23, 32], "end_of": [12, 23, 25, 26, 28, 29, 30, 31, 32], "length_of": [12, 23], "size_of": [12, 23], "presence_of": [12, 23, 27], "start_at_start": [12, 23], "delai": [12, 17], "start_at_end": [12, 23], "start_before_start": [12, 23], "start_before_end": [12, 23], "end_at_start": [12, 23], "end_at_end": [12, 23], "end_before_start": [12, 23, 25, 26, 27, 28, 30], "end_before_end": [12, 23], "forbid_start": [12, 23, 26], "forbid": 12, "region": 12, "forbid_end": [12, 23, 26], "forbid_ext": [12, 23], "overlap_length": [12, 23], "start_ev": [12, 23], "end_ev": [12, 23], "size_ev": [12, 23], "length_ev": [12, 23], "altern": [12, 21, 23, 24, 27, 31], "synchron": [12, 23], "isomorph": [12, 23], "start_of_next": [12, 23], "start_of_prev": [12, 23], "end_of_next": [12, 23], "end_of_prev": [12, 23], "length_of_next": [12, 23], "length_of_prev": [12, 23], "size_of_next": [12, 23], "size_of_prev": [12, 23], "type_of_next": [12, 23], "type_of_prev": [12, 23], "same_sequ": [12, 23], "same_common_subsequ": [12, 23], "subsequ": [12, 19], "panel": [12, 17, 19, 23, 25, 26, 28, 29, 30], "elementari": 12, "puls": [12, 23, 30, 32], "outsid": 12, "opposit": 12, "step_at": [12, 23], "step_at_start": [12, 23], "step_at_end": [12, 23], "height_at_start": [12, 23], "height_at_end": [12, 23], "always_in": [12, 23, 32], "cumul_rang": [12, 23], "ongo": 12, "always_no_st": [12, 23], "ensur": [12, 18, 19], "always_const": [12, 23], "always_equ": [12, 23], "selector": 12, "instanti": [12, 14, 15], "domain_s": [12, 23], "chosen": 12, "var_impact": [12, 23], "space": [12, 13, 20], "var_local_impact": [12, 23], "var_index": [12, 23], "var_success_r": [12, 23], "success": [12, 13, 14], "rate": [12, 20], "impact_of_last_branch": [12, 23], "achiev": [12, 13], "explicit_var_ev": [12, 23], "value_impact": [12, 23], "observ": [12, 13], "far": [12, 23], "value_success_r": [12, 23], "value_index": [12, 23], "explicit_value_ev": [12, 23], "chooser": 12, "select_smallest": [12, 23], "select_largest": [12, 23], "select_random_var": [12, 23], "randomli": 12, "select_random_valu": [12, 23], "embed": 12, "proof": [12, 13, 18], "recal": 12, "abs_of": [12, 23], "abstractvalu": 12, "word": 12, "respect": [12, 16, 24, 27], "That": [12, 14], "imping": 12, "escap": [12, 18], "Or": 12, "arr": 12, "short": [12, 14], "distinct": 12, "enforc": [12, 24, 31], "all_of": [12, 23], "signatur": 12, "cardin": 12, "unit": 12, "isstartalign": 12, "isendalign": 12, "everywher": 12, "speak": 12, "flag": [12, 16], "align": 12, "_x": 12, "cumulexpr": 12, "statefunct": [12, 13, 14], "regardless": 12, "post": 12, "hold": 12, "intervalmax": [12, 16], "any_of": [12, 23], "interval1": 12, "interval2": 12, "whenev": [12, 13], "implicitli": 12, "et": 12, "ef": 12, "useless": 12, "firstslop": 12, "lastslop": 12, "separ": [12, 18], "axi": [12, 19], "discontinu": 12, "twice": [12, 13], "revers": 12, "belong": [12, 29], "miss": 12, "subscript": 12, "exactli": [12, 29], "exact": [12, 16], "sooner": 12, "even": [12, 13, 14, 18], "absentvalu": 12, "lastvalu": 12, "firstvalu": 12, "defaultev": 12, "hat": 12, "defautev": 12, "exp": 12, "filler": 12, "therefor": [12, 13, 19], "close": [12, 16, 18, 20], "wasn": 12, "much": [12, 13, 20], "consider": 12, "in_rang": [12, 23], "tell": 12, "might": [12, 20, 21], "sai": 12, "hint": 12, "improv": [12, 13], "silent": 12, "imposs": 12, "complic": 12, "ilointexpr": 12, "inde": 12, "invf": 12, "array1": 12, "array2": 12, "reflect": [12, 13], "lessorequ": 12, "sens": 12, "keyword": 12, "parenthesis": 12, "suppli": 12, "max_of": [12, 23], "ask": 12, "seek": 12, "sought": 12, "larger": [12, 13], "preced": [12, 13, 24, 26, 27, 30], "termin": [12, 13, 17, 25, 28], "prove": 12, "exhaust": 12, "abort": [12, 16, 17, 20], "fashion": 12, "incumb": 12, "criteria": [12, 13, 14, 17], "newer": 12, "arbitrari": 12, "denot": [12, 19, 24, 31], "min_of": [12, 23], "smaller": [12, 13, 14], "distance_matrix": 12, "is_direct": 12, "a1": 12, "pairwis": 12, "ai": 12, "aj": 12, "tpi": 12, "tpj": 12, "immedi": [12, 13, 24, 31], "successor": [12, 24, 30, 31], "direct": [12, 13, 20], "indirect": 12, "let": [12, 20], "wherea": 12, "4th": 12, "6th": 12, "inclus": 12, "esoter": 12, "omit": 12, "relationship": 12, "effect": [12, 13, 17], "heightmin": 12, "heightmax": 12, "seq1": 12, "seq2": 12, "slightli": 12, "faster": [12, 13], "multipli": [12, 17], "varchoos": 12, "valuechoos": 12, "similarli": 12, "appli": [12, 13, 18], "extract": [12, 13, 24, 30], "minnumb": 12, "toler": [12, 13, 14], "decreas": 12, "probabl": 12, "valuat": 12, "card": 12, "expresss": 12, "refx": 12, "refi": 12, "furthermor": [12, 24, 29, 31], "unless": [12, 13], "jump": 12, "delta": 12, "togeth": [12, 13, 26], "meanlb": 12, "meanub": 12, "h": [12, 26, 27], "strengthen": 12, "presolv": [12, 13], "inconsist": [12, 13], "redund": 12, "sub_circuit": [12, 23], "circuit": 12, "understand": 12, "addition": [12, 19], "symmetri": 12, "predecessor": 12, "rather": [12, 13], "pred": 12, "via": [12, 13, 20, 21], "sum_of": [12, 23], "good": [12, 21, 24], "defaultvalu": 12, "greatest": 12, "defaultindex": 12, "effort": [12, 13], "probe": [12, 13], "getter": 13, "setter": 13, "60": 13, "set_timelimit": 13, "set_attribut": [13, 18], "get_timelimit": 13, "get_attribut": [13, 18], "pep8": 13, "convent": 13, "often": 13, "warninglevel": 13, "warn": [13, 15, 16, 17, 20], "issu": 13, "launch": 13, "printmodeldetailsinmessag": 13, "off": [13, 20, 24, 26], "modelanonym": 13, "anonym": [13, 14], "dump": [13, 20], "dumpmodel": 13, "usefileloc": 13, "kpidisplai": 13, "singlelin": 13, "multiplelin": 13, "compact": [13, 26, 27, 31], "optimalitytoler": [13, 14], "1e": [13, 14], "09": 13, "relativeoptimalitytoler": [13, 14], "rel": 13, "0001": 13, "restartfaillimit": 13, "restartgrowthfactor": 13, "dynamicprob": 13, "dynamicprobingstrength": 13, "001": 13, "03": 13, "multipointnumberofsearchpoint": 13, "manipul": [13, 23], "30": 13, "temporalrelax": 13, "tempor": 13, "relax": 13, "failuredirectedsearch": 13, "failuredirectedsearchemphasi": 13, "invest": 13, "failuredirectedsearchmaxmemori": 13, "amount": [13, 14, 24, 30], "memori": [13, 14], "104857600": 13, "automaticreplai": 13, "low": 13, "cpu": 13, "elaps": [13, 18], "timemod": 13, "measur": 13, "cputim": 13, "elapsedtim": 13, "faillimit": [13, 27, 29, 30, 31], "choicepointlimit": 13, "choic": 13, "branchlimit": 13, "branch": [13, 14], "solutionlimit": 13, "medium": 13, "defaultinferencelevel": 13, "alldiffinferencelevel": 13, "distributeinferencelevel": 13, "countinferencelevel": 13, "countdifferentinferencelevel": 13, "countdiffer": 13, "sequenceinferencelevel": 13, "allmindistanceinferencelevel": 13, "allmindist": 13, "elementinferencelevel": 13, "precedenceinferencelevel": 13, "intervalsequenceinferencelevel": 13, "mainten": 13, "nooverlapinferencelevel": 13, "nooverlap": 13, "cumulfunctioninferencelevel": 13, "cumulfunctionexpr": 13, "statefunctioninferencelevel": 13, "myparam": 13, "strength": 13, "startnewsearch": 13, "replai": 13, "best": [13, 23], "ilc": 13, "interfac": [13, 16], "own": [13, 20, 24], "goal": [13, 24, 30], "ilcgoal": 13, "determinist": 13, "thing": 13, "moment": 13, "decid": 13, "lead": [13, 20], "adjust": [13, 19], "adapt": [13, 17, 20, 23], "deactiv": 13, "held": 13, "throughout": 13, "thereaft": 13, "consum": 13, "roughli": 13, "rest": [13, 25, 28, 29, 30], "around": [13, 21], "better": 13, "hard": 13, "focus": 13, "systemat": 13, "explor": 13, "legal": 13, "exce": 13, "spend": 13, "byte": [13, 14, 18, 20], "104": 13, "857": 13, "600": [13, 26], "100mb": 13, "lot": [13, 24], "especi": 13, "small": [13, 24, 32], "tend": 13, "significantli": 13, "influenc": 13, "Its": 13, "intervalsequencevar": 13, "progress": [13, 17], "meant": 13, "visual": [13, 19], "inspect": 13, "correct": [13, 20], "diversifi": 13, "expens": 13, "intensifi": 13, "converg": 13, "consumpt": 13, "proportion": 13, "report": [13, 22], "conjunct": [13, 18], "proven": 13, "fulfil": 13, "concern": [13, 14], "05": 13, "regular": [13, 14], "aggress": 13, "dive": 13, "techniqu": 13, "larg": [13, 24, 31, 32], "beta": 13, "sequenti": 13, "spread": 13, "latter": 13, "due": 13, "ti": 13, "ineffici": 13, "processor": 13, "exportmodel": 13, "mask": 13, "emphasi": 13, "grow": 13, "linearli": 13, "advis": 13, "get_alldiffinferencelevel": 13, "get_allmindistanceinferencelevel": 13, "get_automaticreplai": 13, "get_branchlimit": 13, "get_choicepointlimit": 13, "get_conflictrefinerbranchlimit": 13, "get_conflictrefinerfaillimit": 13, "get_conflictrefineriterationlimit": 13, "get_conflictrefineronvari": 13, "get_conflictrefinertimelimit": 13, "get_countdifferentinferencelevel": 13, "get_countinferencelevel": 13, "get_cumulfunctioninferencelevel": 13, "get_defaultinferencelevel": 13, "get_distributeinferencelevel": 13, "get_dynamicprob": 13, "get_dynamicprobingstrength": 13, "get_elementinferencelevel": 13, "get_faillimit": 13, "get_failuredirectedsearch": 13, "get_failuredirectedsearchemphasi": 13, "get_failuredirectedsearchmaxmemori": 13, "get_intervalsequenceinferencelevel": 13, "get_kpidisplai": 13, "get_logperiod": 13, "get_logverbos": 13, "get_modelanonym": 13, "get_multipointnumberofsearchpoint": 13, "get_nooverlapinferencelevel": 13, "get_optimalitytoler": 13, "get_precedenceinferencelevel": 13, "get_presolv": 13, "get_printmodeldetailsinmessag": 13, "get_randomse": 13, "get_relativeoptimalitytoler": 13, "get_restartfaillimit": 13, "get_restartgrowthfactor": 13, "get_searchtyp": 13, "get_sequenceinferencelevel": 13, "get_solutionlimit": 13, "get_statefunctioninferencelevel": 13, "get_temporalrelax": 13, "get_timemod": 13, "get_usefileloc": 13, "get_warninglevel": 13, "get_work": 13, "get_default_valu": 13, "classmethod": 13, "reset_to_default": 13, "parameterdescriptor": [13, 23], "deflt": 13, "cposolverinfo": [14, 23], "miscellan": [14, 18, 23], "come": 14, "cpoprocessinfo": [14, 23], "aggreg": 14, "uniqu": 14, "cpofloatvarsolut": [14, 23], "cpovarsolut": [14, 23], "13": [14, 19, 31], "undetermin": 14, "easi": [14, 19, 21, 23], "get_var_solut": [14, 25, 26, 27, 28, 29, 30, 31, 32], "keyerror": 14, "programm": 14, "add_kpi_valu": 14, "add_var": 14, "add_var_solut": 14, "vsol": 14, "get_all_var_solut": 14, "get_as_constraint": 14, "compli": 14, "labori": 14, "get_kpi_valu": 14, "get_objective_bound": 14, "independ": [14, 20, 23], "Then": 14, "perfectli": 14, "though": 14, "get_objective_gap": 14, "gap": 14, "__getitem__": [14, 18, 20], "has_var_solut": 14, "is_empti": 14, "map_solut": 14, "sobj": 14, "recurs": [14, 18], "__setitem__": 14, "infodict": [14, 18, 23], "profit": 14, "pure": 14, "few": 14, "get_model_build_tim": 14, "get_solver_vers": [14, 16, 23], "get_total_solve_tim": 14, "send": [14, 20], "examin": 14, "portion": 14, "arriv": 14, "analysi": [14, 21], "repeat": 14, "diagnosi": 14, "further": 14, "get_all_member_constraint": 14, "certainli": 14, "get_member_constraint": 14, "get_all_member_vari": 14, "get_member_vari": 14, "get_all_possible_constraint": 14, "get_possible_constraint": 14, "get_all_possible_vari": 14, "get_possible_vari": 14, "get_conflict_statu": 14, "conflict_status_": 14, "get_cpo": 14, "is_conflict": 14, "print_conflict": 14, "add_cpo": 14, "get_info": 14, "get_solver_info": 14, "get_process_info": 14, "lvar": 14, "get_fail_statu": 14, "get_search_statu": 14, "get_stop_caus": 14, "all_fail_status": 14, "solve_statu": 14, "earlier": 14, "all_search_status": 14, "get_solut": 14, "all_solve_status": 14, "fail_statu": 14, "all_stop_caus": 14, "is_new_solut": 14, "is_solution_optim": [14, 16], "search_next": [14, 16], "write_in_str": 14, "disctioanr": 14, "itsef": 14, "get_memory_usag": 14, "get_number_of_branch": 14, "get_number_of_fail": 14, "get_number_of_integer_var": 14, "get_number_of_interval_var": 14, "get_number_of_sequence_var": 14, "get_number_of_solut": 14, "get_total_tim": 14, "triplet": 14, "get_function_step": 14, "get_expr": 14, "intervalvarpartialvalu": [14, 23], "field": [14, 20], "intervalvarvalu": [14, 23], "event": [15, 17], "sre": [15, 17], "all_callback_ev": 15, "softwar": 16, "cposolverag": [16, 23], "underli": [16, 20], "slvr": 16, "get_cpo_model_str": 16, "variat": 16, "get_last_result": 16, "get_last_solut": 16, "get_model_format_vers": 16, "remove_callback": 16, "remove_listen": 16, "move": [16, 18, 26, 27], "set_solve_with_search_next": 16, "swsn": 16, "solve_with_search_next": [16, 17], "intermedi": 16, "wist": 16, "intend": 16, "abort_search": 16, "set_explain_failure_tag": 16, "clear": [16, 18], "cposolverexcept": [16, 23], "get_version_info": [16, 23], "proxyvers": 16, "sourced": 16, "sep": 16, "2017": 16, "solververs": 16, "intmin": 16, "intmax": 16, "intervalmin": 16, "autostoplisten": [17, 23], "reach": [17, 18], "delaylisten": [17, 23], "wait": [17, 18, 20], "solverprogresspanellisten": [17, 23], "packag": [17, 18, 20, 21, 23, 24, 32], "tkinter": 17, "14": [17, 31], "qsc_time": 17, "qsc_sol": 17, "min_sol": 17, "max_sol": 17, "minimun": 17, "quiesc": 17, "end_solv": 17, "result_found": 17, "signal": 17, "solution_found": 17, "confus": 17, "start_solv": 17, "notic": 17, "solver_cr": 17, "start_oper": 17, "end_oper": 17, "new_result": 17, "new_log_data": 17, "piec": 17, "notif": 17, "never": 17, "start_refine_conflict": 17, "end_refine_conflict": 17, "conflict_found": 17, "cflct": 17, "operation_": 17, "logsolverlisten": [17, 23], "parse_log": 17, "theme": 18, "prevent": 18, "port": 18, "theoret": 18, "barrier": [18, 23], "block": 18, "timeout": 18, "unlock": 18, "chrono": [18, 23], "chronomet": 18, "get_elaps": 18, "dict": [18, 20, 31], "del_attribut": 18, "export_flat": 18, "flat": 18, "written": [18, 20], "export_flat_as_str": 18, "get_by_path": 18, "dot": 18, "get_log_output": 18, "get_par": 18, "get_root": 18, "import_flat": 18, "inp": 18, "is_log_en": 18, "vrb": 18, "print_context": 18, "At": 18, "search_and_replace_attribut": 18, "children": 18, "set_by_path": 18, "set_oth": 18, "functioncach": [18, 23], "idalloc": [18, 23], "bdgt": 18, "0123456789": 18, "safeidalloc": [18, 23], "charact": [18, 19, 20], "counter": 18, "get_count": 18, "get_prefix": 18, "identityaccessor": [18, 23], "incr": 18, "increment": 18, "print_info": 18, "keyiddict": [18, 23], "__hash__": 18, "listdict": [18, 23], "append": [18, 20, 26, 27, 28], "objectcach": [18, 23], "maxsiz": 18, "oldest": 18, "objectcachebyid": [18, 23], "persistentcontext": [18, 23], "save": [18, 20], "protect": 18, "textfilelineread": [18, 23], "sig": 18, "readlin": [18, 25, 28, 29, 30], "assert_arg_int_interv": [18, 23], "typeerror": 18, "wrong": 18, "check_default": [18, 23], "compare_natur": [18, 23], "s1": [18, 31], "s2": [18, 31], "create_stdout_logg": [18, 23], "logger": 18, "formatt": [18, 19], "decode_integer_big_endian_4": [18, 23], "frame": [18, 20], "endian": 18, "decod": 18, "encode_csv_str": [18, 23], "csv": [18, 20], "doubl": 18, "quot": 18, "encode_integer_big_endian_4": [18, 23], "format_text": [18, 23], "get_file_name_onli": [18, 23], "get_main_fil": [18, 23], "get_module_element_from_path": [18, 23], "opath": 18, "get_module_vers": [18, 23], "mname": 18, "get_system_path": [18, 23], "int_to_bas": [18, 23], "is_arrai": [18, 23], "is_array_of_typ": [18, 23], "is_bool": [18, 23], "variant": 18, "is_exe_fil": [18, 23], "is_float": [18, 23], "is_in": [18, 23], "lval": 18, "membership": 18, "candid": 18, "is_in_notebook": [18, 23], "ipython": 18, "jupyt": 18, "is_int": [18, 23], "is_int_arrai": [18, 23], "is_int_valu": [18, 23], "xv": 18, "is_iter": [18, 23], "is_numb": [18, 23], "is_panda_seri": [18, 23], "is_str": [18, 23], "is_symbol": [18, 23], "is_symbol_char": [18, 23], "z": 18, "_": [18, 20, 31], "is_tupl": [18, 23], "list_module_public_funct": [18, 23], "make_directori": [18, 23], "make_unicod": [18, 23], "unicod": [18, 20], "open_utf8": [18, 23], "r": [18, 25, 28, 29, 30], "parse_json_str": [18, 23], "jstr": 18, "read_string_fil": [18, 23], "obj": 18, "rfun": 18, "replace_in_tupl": [18, 23], "tpl": 18, "ndx": 18, "search_exec_fil": [18, 23], "string_to_valu": [18, 23], "encapsul": 18, "double_quot": 18, "to_compact_si": [18, 23], "suffix": 18, "g": 18, "signific": 18, "to_internal_str": [18, 23], "strg": 18, "enclos": 18, "to_printable_id": [18, 23], "printabl": 18, "char": 18, "to_printable_str": [18, 23], "to_str": [18, 23], "write_checking_unicode_error": [18, 23], "unicodeencodeerror": 18, "write_string_fil": [18, 23], "matplotlib": [19, 23, 24, 32], "color": [19, 21, 24, 26, 27, 30], "area": [19, 30], "timelin": [19, 23, 25, 26, 27, 28, 29, 30, 31], "scope": 19, "enlarg": 19, "fit": 19, "f1": 19, "40": [19, 26, 27], "f2": 19, "cpointerv": 19, "job1": 19, "35": [19, 26, 27, 32], "darkr": 19, "itvsol": 19, "is_visu_en": [19, 23, 25, 26, 27, 28, 29, 30, 31, 32], "visu": [19, 24], "cpomatrix": 19, "figur": 19, "among": [19, 24, 27], "vij": 19, "unspecifi": 19, "cell": 19, "m1": [19, 31], "ill": 19, "eleg": 19, "trunk": 19, "paus": [19, 23, 26], "vstart": 19, "vend": 19, "machine1": 19, "job2": 19, "pngfile": 19, "screen": 19, "premis": [20, 23], "get_input_stream": [20, 23], "split": [20, 25, 26, 27, 28, 29, 30, 31], "get_output_stream": [20, 23], "fragment": 20, "38": 20, "get_environ": [20, 23], "platform": 20, "default_environ": 20, "read_df": [20, 23], "write_df": [20, 23], "get_available_core_count": [20, 23], "update_solve_detail": [20, 23], "add_abort_callback": [20, 23], "remove_abort_callback": [20, 23], "abstractlocalenviron": [20, 23], "transact": 20, "record": 20, "bit": 20, "set_output_attach": [20, 23], "filenam": [20, 25, 28, 29, 30], "entri": [20, 24], "26": [20, 26, 31], "abort_callback": 20, "script": 20, "env": 20, "your_cb": 20, "solution_storage_handl": 20, "storag": 20, "default_solution_storage_handl": [20, 23], "record_history_field": 20, "histori": 20, "kept": 20, "record_history_s": 20, "record_interv": 20, "create_transact": 20, "outputattachmenttransact": [20, 23], "get_engine_log_level": 20, "oaa": 20, "engineloglevel": 20, "fine": 20, "finer": 20, "finest": 20, "invalid": 20, "get_stop_callback": 20, "stop_callback": 20, "is_debug_mod": 20, "publish_solve_detail": 20, "datafram": 20, "read_csv": 20, "read_msgpack": 20, "notavailableerror": [20, 23], "set_stop_callback": 20, "cb": 20, "store_solut": 20, "trigger": 20, "serial": 20, "auto_publish": 20, "finish": [20, 24, 26, 27, 30], "filter": 20, "de": 20, "df": 20, "writer": 20, "localenviron": [20, 23], "commit": 20, "publush": 20, "overrideenviron": [20, 23], "new_env": 20, "temporarili": 20, "overrid": 20, "solvedetailsfilt": [20, 23], "respons": 20, "make_attachment_nam": [20, 23], "255": 20, "ascii": 20, "null": [20, 24, 27], "unauthor": 20, "conform": 20, "valueerror": 20, "maketran": [20, 23], "translat": [20, 23], "usabl": 20, "ordin": 20, "lookup": 20, "lookuperror": 20, "left": 20, "untouch": 20, "delet": 20, "to_csv": 20, "to_msgpack": 20, "verifi": 21, "meet": [21, 24, 30], "scientist": 21, "workbench": 21, "anyth": 21, "window": [21, 26, 27], "linux": 21, "mac": 21, "editor": 21, "debugg": 21, "pycharm": 21, "pydev": 21, "anaconda": [21, 24], "popular": 21, "scienc": [21, 22], "math": 21, "upgrad": 21, "uninstal": 21, "readm": 21, "md": 21, "docplex_exampl": 21, "uncompress": 21, "go": [21, 22, 24], "enter": [21, 24], "overview": 22, "solver_listen": [22, 23], "cpo_callback": [22, 23], "utils_visu": [22, 23, 25, 26, 27, 28, 29, 30, 31, 32], "bug": 22, "home": 22, "dofeedback": 22, "wwpdl": 22, "vnet": 22, "page": [22, 23], "privat": 23, "lib": 23, "cpoexpress": 23, "matric": 23, "master": 24, "subdirectori": 24, "categori": 24, "folder": 24, "graphic": 24, "mix": 24, "equat": 24, "explanatori": 24, "server": 24, "n_queen": 24, "golomb_rul": 24, "truck_fleet": 24, "travel": 24, "mostli": 24, "job_shop_bas": [24, 25, 30], "shop": [24, 25, 28, 29, 30], "finit": [24, 28, 29], "uninterrupt": [24, 28], "rcpsp": 24, "project": [24, 30], "flow": [24, 25, 30], "flow_shop": [24, 29, 30], "open_shop": [24, 25, 30], "network": [24, 30], "house_building_calendar": 24, "five": [24, 26, 27], "hous": [24, 26, 27], "masonri": [24, 26, 27], "roof": [24, 26, 27], "paint": [24, 26, 27], "calendar": [24, 26], "overal": [24, 26], "house_building_opt": 24, "skill": [24, 27], "deadlin": [24, 27], "while": [24, 27], "setup_tim": 24, "heterogen": [24, 31], "a_1": [24, 31], "a_n": [24, 31], "distinguish": [24, 31], "a_i": [24, 31], "tp_i": [24, 31], "switch": [24, 31], "squaring_squar": 24, "ipynb": 24, "extra": 24, "educ": 24, "assist": 24, "house_build": 24, "inlin": 24, "explan": 24, "technolog": 25, "flowshop_default": 25, "flowshop_xxxxx": 25, "dirnam": [25, 28, 29, 30], "abspath": [25, 28, 29, 30], "__file__": [25, 28, 29, 30], "nb_job": [25, 28, 29], "nb_machin": [25, 28, 29], "op_dur": 25, "1000000": 25, "holidai": 26, "start_dai": 26, "end_dai": 26, "joe": [26, 27], "124": 26, "131": 26, "215": 26, "236": 26, "369": 26, "376": 26, "495": 26, "502": 26, "579": 26, "jim": [26, 27], "201": 26, "225": 26, "306": 26, "313": 26, "397": 26, "411": 26, "565": 26, "carpentri": [26, 27], "plumb": [26, 27], "facad": [26, 27], "garden": [26, 27], "number_of_hous": 26, "year": 26, "max_year": 26, "365": 26, "week": 26, "52": 26, "worker_task": [26, 27], "house_finish_tim": 26, "def": [26, 27, 31], "make_hous": [26, 27], "h3": [26, 27], "g3": [26, 27], "nb_hous": 27, "318": 27, "jack": 27, "nb_worker": 27, "total_skil": 27, "t2": 27, "wt": 27, "jobshop_ft06": 28, "jobshop_ft10": 28, "jobshop_ft20": 28, "job_oper": [28, 29], "machine_oper": 28, "mop": 28, "simultan": 29, "openshop_default": 29, "openshop_xxxx": 29, "job_dur": 29, "rcpsp_default": 30, "rcpsp_xxxxxx": 30, "demand": 30, "nb_task": [30, 31], "nb_resourc": 30, "100000": [30, 31], "itv": 30, "lightgrei": 30, "nb_type": 31, "setup_m1": 31, "28": 31, "29": [31, 32], "17": [31, 32], "m2": 31, "setup_m2": 31, "task_typ": 31, "task_dur_m1": 31, "task_dur_m2": 31, "tasks_m1": 31, "_m1_tp": 31, "tasks_m2": 31, "_m2_tp": 31, "_tp": 31, "task_id": 31, "a31_m1_tp1": 31, "31": 31, "foo": 31, "showsequ": 31, "seq": 31, "tp1": 31, "tp2": 31, "schedsetup": 31, "aim": 32, "squaring_the_squar": 32, "dateutil": 32, "pypars": 32, "englob": 32, "size_squar": 32, "112": 32, "size_subsquar": 32, "42": 32, "37": 32, "33": 32, "27": 32, "25": 32, "24": 32, "nb_subsquar": 32, "subsquar": 32, "vx": 32, "vy": 32, "rx": 32, "ry": 32, "50000": 32, "pyplot": 32, "plt": 32, "cm": 32, "patch": 32, "polygon": 32, "plot": 32, "fig": 32, "ax": 32, "subplot": 32, "sx": 32, "sx1": 32, "sx2": 32, "sy1": 32, "sy2": 32, "poli": 32, "fc": 32, "set2": 32, "add_patch": 32, "center": 32, "va": 32, "margin": 32}, "objects": {"docplex.cp": [[6, 0, 0, "-", "blackbox"], [7, 0, 0, "-", "config"], [8, 0, 0, "-", "expression"], [9, 0, 0, "-", "function"], [11, 0, 0, "-", "model"], [12, 0, 0, "-", "modeler"], [13, 0, 0, "-", "parameters"], [14, 0, 0, "-", "solution"], [18, 0, 0, "-", "utils"], [19, 0, 0, "-", "utils_visu"]], "docplex.cp.blackbox": [[6, 1, 1, "", "CpoBlackboxFunction"], [6, 1, 1, "", "CpoBlackboxFunctionCall"]], "docplex.cp.blackbox.CpoBlackboxFunction": [[6, 2, 1, "", "build_model_call"], [6, 2, 1, "", "eval"], [6, 2, 1, "", "get_arg_types"], [6, 2, 1, "", "get_cache_size"], [6, 2, 1, "", "get_dimension"], [6, 2, 1, "", "get_eval_count"], [6, 2, 1, "", "get_implementation"], [6, 2, 1, "", "get_name"], [6, 2, 1, "", "has_implementation"], [6, 2, 1, "", "is_global_cache"], [6, 2, 1, "", "is_parallel_eval"], [6, 2, 1, "", "reset_eval_count"], [6, 2, 1, "", "set_cache_size"], [6, 2, 1, "", "set_dimension"], [6, 2, 1, "", "set_global_cache"], [6, 2, 1, "", "set_implementation"], [6, 2, 1, "", "set_name"], [6, 2, 1, "", "set_parallel_eval"]], "docplex.cp.config": [[7, 3, 1, "", "get_default"], [7, 3, 1, "", "set_default"]], "docplex.cp.expression": [[8, 1, 1, "", "CpoAlias"], [8, 1, 1, "", "CpoBoolVar"], [8, 1, 1, "", "CpoExpr"], [8, 1, 1, "", "CpoFloatVar"], [8, 1, 1, "", "CpoFunctionCall"], [8, 1, 1, "", "CpoIntVar"], [8, 1, 1, "", "CpoIntervalVar"], [8, 1, 1, "", "CpoSequenceVar"], [8, 1, 1, "", "CpoStateFunction"], [8, 1, 1, "", "CpoTransitionMatrix"], [8, 1, 1, "", "CpoValue"], [8, 1, 1, "", "CpoVariable"], [8, 5, 1, "", "DEFAULT_INTEGER_VARIABLE_DOMAIN"], [8, 5, 1, "", "DEFAULT_INTERVAL"], [8, 5, 1, "", "INFINITY"], [8, 5, 1, "", "INTERVAL_MAX"], [8, 5, 1, "", "INTERVAL_MIN"], [8, 5, 1, "", "INT_MAX"], [8, 5, 1, "", "INT_MIN"], [8, 1, 1, "", "IntegerDomain"], [8, 5, 1, "", "NEGATIVE_INFINITY"], [8, 5, 1, "", "POSITIVE_INFINITY"], [8, 3, 1, "", "binary_var"], [8, 3, 1, "", "binary_var_dict"], [8, 3, 1, "", "binary_var_list"], [8, 3, 1, "", "build_cpo_expr"], [8, 3, 1, "", "build_cpo_expr_array"], [8, 3, 1, "", "build_cpo_transition_matrix"], [8, 3, 1, "", "build_cpo_tupleset"], [8, 3, 1, "", "compare_expressions"], [8, 3, 1, "", "get_domain_max"], [8, 3, 1, "", "get_domain_min"], [8, 3, 1, "", "get_node_count"], [8, 3, 1, "", "integer_var"], [8, 3, 1, "", "integer_var_dict"], [8, 3, 1, "", "integer_var_list"], [8, 3, 1, "", "interval_var"], [8, 3, 1, "", "interval_var_dict"], [8, 3, 1, "", "interval_var_list"], [8, 3, 1, "", "is_cpo_expr"], [8, 3, 1, "", "pretty_print"], [8, 3, 1, "", "sequence_var"], [8, 3, 1, "", "state_function"], [8, 3, 1, "", "transition_matrix"], [8, 3, 1, "", "tuple_set"]], "docplex.cp.expression.CpoBoolVar": [[8, 2, 1, "", "is_binary"], [8, 2, 1, "", "is_bool_var"]], "docplex.cp.expression.CpoExpr": [[8, 2, 1, "", "compare"], [8, 2, 1, "", "equals"], [8, 2, 1, "", "get_max_depth"], [8, 2, 1, "", "get_name"], [8, 2, 1, "", "get_node_count"], [8, 2, 1, "", "get_priority"], [8, 2, 1, "", "get_type"], [8, 2, 1, "", "has_name"], [8, 2, 1, "", "is_kind_of"], [8, 2, 1, "", "is_type"], [8, 2, 1, "", "is_variable"], [8, 2, 1, "", "pretty_print"], [8, 2, 1, "", "set_name"]], "docplex.cp.expression.CpoFloatVar": [[8, 2, 1, "", "equals"]], "docplex.cp.expression.CpoFunctionCall": [[8, 2, 1, "", "get_priority"]], "docplex.cp.expression.CpoIntVar": [[8, 2, 1, "", "domain_contains"], [8, 2, 1, "", "domain_iterator"], [8, 2, 1, "", "equals"], [8, 2, 1, "", "get_domain"], [8, 2, 1, "", "get_domain_max"], [8, 2, 1, "", "get_domain_min"], [8, 2, 1, "", "is_binary"], [8, 2, 1, "", "is_bool_var"], [8, 4, 1, "", "lb"], [8, 2, 1, "", "set_domain"], [8, 4, 1, "", "ub"]], "docplex.cp.expression.CpoIntervalVar": [[8, 2, 1, "", "get_end"], [8, 2, 1, "", "get_granularity"], [8, 2, 1, "", "get_intensity"], [8, 2, 1, "", "get_length"], [8, 2, 1, "", "get_size"], [8, 2, 1, "", "get_start"], [8, 2, 1, "", "is_absent"], [8, 2, 1, "", "is_optional"], [8, 2, 1, "", "is_present"], [8, 2, 1, "", "set_absent"], [8, 2, 1, "", "set_end"], [8, 2, 1, "", "set_end_max"], [8, 2, 1, "", "set_end_min"], [8, 2, 1, "", "set_granularity"], [8, 2, 1, "", "set_intensity"], [8, 2, 1, "", "set_length"], [8, 2, 1, "", "set_length_max"], [8, 2, 1, "", "set_length_min"], [8, 2, 1, "", "set_optional"], [8, 2, 1, "", "set_present"], [8, 2, 1, "", "set_size"], [8, 2, 1, "", "set_size_max"], [8, 2, 1, "", "set_size_min"], [8, 2, 1, "", "set_start"], [8, 2, 1, "", "set_start_max"], [8, 2, 1, "", "set_start_min"]], "docplex.cp.expression.CpoSequenceVar": [[8, 2, 1, "", "get_interval_variables"], [8, 2, 1, "", "get_types"], [8, 2, 1, "", "get_vars"]], "docplex.cp.expression.CpoStateFunction": [[8, 2, 1, "", "get_transition_matrix"], [8, 2, 1, "", "set_transition_matrix"]], "docplex.cp.expression.CpoTransitionMatrix": [[8, 2, 1, "", "get_all_values"], [8, 2, 1, "", "get_matrix"], [8, 2, 1, "", "get_size"], [8, 2, 1, "", "get_value"], [8, 2, 1, "", "set_value"]], "docplex.cp.expression.CpoVariable": [[8, 2, 1, "", "is_variable"]], "docplex.cp.function": [[9, 1, 1, "", "CpoFunction"], [9, 1, 1, "", "CpoSegmentedFunction"], [9, 1, 1, "", "CpoStepFunction"]], "docplex.cp.function.CpoFunction": [[9, 2, 1, "", "add_slope"], [9, 2, 1, "", "add_value"], [9, 2, 1, "", "copy"], [9, 2, 1, "", "get_value"], [9, 2, 1, "", "set_slope"], [9, 2, 1, "", "set_value"]], "docplex.cp.function.CpoSegmentedFunction": [[9, 2, 1, "", "get_segment_list"]], "docplex.cp.function.CpoStepFunction": [[9, 2, 1, "", "get_step_list"]], "docplex.cp.fzn": [[10, 0, 0, "-", "fzn_parser"]], "docplex.cp.fzn.fzn_parser": [[10, 1, 1, "", "FznConstraint"], [10, 1, 1, "", "FznObject"], [10, 1, 1, "", "FznObjective"], [10, 1, 1, "", "FznParameter"], [10, 1, 1, "", "FznParser"], [10, 6, 1, "", "FznParserException"], [10, 1, 1, "", "FznReader"], [10, 1, 1, "", "FznVariable"]], "docplex.cp.fzn.fzn_parser.FznParser": [[10, 2, 1, "", "get_model"], [10, 2, 1, "", "get_output_variables"], [10, 2, 1, "", "parse"], [10, 2, 1, "", "parse_string"]], "docplex.cp.fzn.fzn_parser.FznReader": [[10, 2, 1, "", "parse"], [10, 2, 1, "", "parse_string"], [10, 2, 1, "", "write"]], "docplex.cp.fzn.fzn_parser.FznVariable": [[10, 2, 1, "", "is_defined"], [10, 2, 1, "", "is_introduced"], [10, 2, 1, "", "is_output"]], "docplex.cp.model": [[11, 1, 1, "", "CpoModel"], [11, 1, 1, "", "CpoModelStatistics"]], "docplex.cp.model.CpoModel": [[11, 2, 1, "", "add"], [11, 2, 1, "", "add_blackbox_function"], [11, 2, 1, "", "add_constraint"], [11, 2, 1, "", "add_kpi"], [11, 2, 1, "", "add_parameters"], [11, 2, 1, "", "add_search_phase"], [11, 2, 1, "", "add_solver_callback"], [11, 2, 1, "", "add_solver_listener"], [11, 2, 1, "", "check_equivalence"], [11, 2, 1, "", "clone"], [11, 2, 1, "", "create_empty_solution"], [11, 2, 1, "", "create_solver"], [11, 2, 1, "", "equals"], [11, 2, 1, "", "explain_failure"], [11, 2, 1, "", "export_as_cpo"], [11, 2, 1, "", "export_model"], [11, 2, 1, "", "export_parameters_as_ops_file"], [11, 2, 1, "", "get_all_expressions"], [11, 2, 1, "", "get_all_variables"], [11, 2, 1, "", "get_blackbox_function"], [11, 2, 1, "", "get_blackbox_functions"], [11, 2, 1, "", "get_cpo_string"], [11, 2, 1, "", "get_format_version"], [11, 2, 1, "", "get_kpis"], [11, 2, 1, "", "get_modeling_duration"], [11, 2, 1, "", "get_name"], [11, 2, 1, "", "get_named_expressions_dict"], [11, 2, 1, "", "get_objective"], [11, 2, 1, "", "get_objective_expression"], [11, 2, 1, "", "get_optimization_expression"], [11, 2, 1, "", "get_parameters"], [11, 2, 1, "", "get_source_file"], [11, 2, 1, "", "get_starting_point"], [11, 2, 1, "", "get_statistics"], [11, 2, 1, "", "import_model"], [11, 2, 1, "", "import_model_string"], [11, 2, 1, "", "is_maximization"], [11, 2, 1, "", "is_minimization"], [11, 2, 1, "", "is_satisfaction"], [11, 2, 1, "", "maximize"], [11, 2, 1, "", "merge_with_parameters"], [11, 2, 1, "", "minimize"], [11, 2, 1, "", "print_information"], [11, 2, 1, "", "propagate"], [11, 2, 1, "", "read_ops_file"], [11, 2, 1, "", "refine_conflict"], [11, 2, 1, "", "remove"], [11, 2, 1, "", "remove_all_kpis"], [11, 2, 1, "", "remove_expressions"], [11, 2, 1, "", "remove_kpi"], [11, 2, 1, "", "remove_solver_callback"], [11, 2, 1, "", "remove_solver_listener"], [11, 2, 1, "", "replace_expression"], [11, 2, 1, "", "run_seeds"], [11, 2, 1, "", "set_format_version"], [11, 2, 1, "", "set_parameters"], [11, 2, 1, "", "set_search_phases"], [11, 2, 1, "", "set_starting_point"], [11, 2, 1, "", "solve"], [11, 2, 1, "", "start_search"], [11, 2, 1, "", "write_information"]], "docplex.cp.model.CpoModelStatistics": [[11, 2, 1, "", "add"], [11, 2, 1, "", "get_number_of_constraints"], [11, 2, 1, "", "get_number_of_expressions"], [11, 2, 1, "", "get_number_of_variables"], [11, 2, 1, "", "to_json"], [11, 2, 1, "", "write"]], "docplex.cp.modeler": [[12, 3, 1, "", "abs"], [12, 3, 1, "", "abs_of"], [12, 3, 1, "", "abstraction"], [12, 3, 1, "", "all"], [12, 3, 1, "", "all_diff"], [12, 3, 1, "", "all_min_distance"], [12, 3, 1, "", "all_of"], [12, 3, 1, "", "allowed_assignments"], [12, 3, 1, "", "alternative"], [12, 3, 1, "", "always_constant"], [12, 3, 1, "", "always_equal"], [12, 3, 1, "", "always_in"], [12, 3, 1, "", "always_no_state"], [12, 3, 1, "", "any"], [12, 3, 1, "", "any_of"], [12, 3, 1, "", "before"], [12, 3, 1, "", "bool_abstraction"], [12, 3, 1, "", "ceil"], [12, 3, 1, "", "conditional"], [12, 3, 1, "", "constant"], [12, 3, 1, "", "coordinate_piecewise_linear"], [12, 3, 1, "", "count"], [12, 3, 1, "", "count_different"], [12, 3, 1, "", "cumul_range"], [12, 3, 1, "", "diff"], [12, 3, 1, "", "distribute"], [12, 3, 1, "", "domain_max"], [12, 3, 1, "", "domain_min"], [12, 3, 1, "", "domain_size"], [12, 3, 1, "", "element"], [12, 3, 1, "", "end_at_end"], [12, 3, 1, "", "end_at_start"], [12, 3, 1, "", "end_before_end"], [12, 3, 1, "", "end_before_start"], [12, 3, 1, "", "end_eval"], [12, 3, 1, "", "end_of"], [12, 3, 1, "", "end_of_next"], [12, 3, 1, "", "end_of_prev"], [12, 3, 1, "", "equal"], [12, 3, 1, "", "explicit_value_eval"], [12, 3, 1, "", "explicit_var_eval"], [12, 3, 1, "", "exponent"], [12, 3, 1, "", "false"], [12, 3, 1, "", "first"], [12, 3, 1, "", "float_div"], [12, 3, 1, "", "floor"], [12, 3, 1, "", "forbid_end"], [12, 3, 1, "", "forbid_extent"], [12, 3, 1, "", "forbid_start"], [12, 3, 1, "", "forbidden_assignments"], [12, 3, 1, "", "greater"], [12, 3, 1, "", "greater_or_equal"], [12, 3, 1, "", "height_at_end"], [12, 3, 1, "", "height_at_start"], [12, 3, 1, "", "if_then"], [12, 3, 1, "", "impact_of_last_branch"], [12, 3, 1, "", "in_range"], [12, 3, 1, "", "inferred"], [12, 3, 1, "", "int_div"], [12, 3, 1, "", "inverse"], [12, 3, 1, "", "isomorphism"], [12, 3, 1, "", "last"], [12, 3, 1, "", "length_eval"], [12, 3, 1, "", "length_of"], [12, 3, 1, "", "length_of_next"], [12, 3, 1, "", "length_of_prev"], [12, 3, 1, "", "less"], [12, 3, 1, "", "less_or_equal"], [12, 3, 1, "", "lexicographic"], [12, 3, 1, "", "log"], [12, 3, 1, "", "logical_and"], [12, 3, 1, "", "logical_not"], [12, 3, 1, "", "logical_or"], [12, 3, 1, "", "max"], [12, 3, 1, "", "max_of"], [12, 3, 1, "", "maximize"], [12, 3, 1, "", "maximize_static_lex"], [12, 3, 1, "", "member"], [12, 3, 1, "", "min"], [12, 3, 1, "", "min_of"], [12, 3, 1, "", "minimize"], [12, 3, 1, "", "minimize_static_lex"], [12, 3, 1, "", "minus"], [12, 3, 1, "", "mod"], [12, 3, 1, "", "no_overlap"], [12, 3, 1, "", "overlap_length"], [12, 3, 1, "", "pack"], [12, 3, 1, "", "plus"], [12, 3, 1, "", "power"], [12, 3, 1, "", "presence_of"], [12, 3, 1, "", "previous"], [12, 3, 1, "", "pulse"], [12, 3, 1, "", "range"], [12, 3, 1, "", "round"], [12, 3, 1, "", "same_common_subsequence"], [12, 3, 1, "", "same_sequence"], [12, 3, 1, "", "scal_prod"], [12, 3, 1, "", "search_phase"], [12, 3, 1, "", "select_largest"], [12, 3, 1, "", "select_random_value"], [12, 3, 1, "", "select_random_var"], [12, 3, 1, "", "select_smallest"], [12, 3, 1, "", "sequence"], [12, 3, 1, "", "sgn"], [12, 3, 1, "", "size_eval"], [12, 3, 1, "", "size_of"], [12, 3, 1, "", "size_of_next"], [12, 3, 1, "", "size_of_prev"], [12, 3, 1, "", "slope_piecewise_linear"], [12, 3, 1, "", "span"], [12, 3, 1, "", "square"], [12, 3, 1, "", "standard_deviation"], [12, 3, 1, "", "start_at_end"], [12, 3, 1, "", "start_at_start"], [12, 3, 1, "", "start_before_end"], [12, 3, 1, "", "start_before_start"], [12, 3, 1, "", "start_eval"], [12, 3, 1, "", "start_of"], [12, 3, 1, "", "start_of_next"], [12, 3, 1, "", "start_of_prev"], [12, 3, 1, "", "step_at"], [12, 3, 1, "", "step_at_end"], [12, 3, 1, "", "step_at_start"], [12, 3, 1, "", "strict_lexicographic"], [12, 3, 1, "", "strong"], [12, 3, 1, "", "sub_circuit"], [12, 3, 1, "", "sum"], [12, 3, 1, "", "sum_of"], [12, 3, 1, "", "synchronize"], [12, 3, 1, "", "times"], [12, 3, 1, "", "true"], [12, 3, 1, "", "trunc"], [12, 3, 1, "", "type_of_next"], [12, 3, 1, "", "type_of_prev"], [12, 3, 1, "", "value"], [12, 3, 1, "", "value_impact"], [12, 3, 1, "", "value_index"], [12, 3, 1, "", "value_success_rate"], [12, 3, 1, "", "var_impact"], [12, 3, 1, "", "var_index"], [12, 3, 1, "", "var_local_impact"], [12, 3, 1, "", "var_success_rate"]], "docplex.cp.parameters": [[13, 1, 1, "", "CpoParameters"], [13, 1, 1, "", "ParameterDescriptor"]], "docplex.cp.parameters.CpoParameters": [[13, 4, 1, "", "AllDiffInferenceLevel"], [13, 4, 1, "", "AllMinDistanceInferenceLevel"], [13, 4, 1, "", "AutomaticReplay"], [13, 4, 1, "", "BranchLimit"], [13, 4, 1, "", "ChoicePointLimit"], [13, 4, 1, "", "ConflictRefinerBranchLimit"], [13, 4, 1, "", "ConflictRefinerFailLimit"], [13, 4, 1, "", "ConflictRefinerIterationLimit"], [13, 4, 1, "", "ConflictRefinerOnVariables"], [13, 4, 1, "", "ConflictRefinerTimeLimit"], [13, 4, 1, "", "CountDifferentInferenceLevel"], [13, 4, 1, "", "CountInferenceLevel"], [13, 4, 1, "", "CumulFunctionInferenceLevel"], [13, 4, 1, "", "DefaultInferenceLevel"], [13, 4, 1, "", "DistributeInferenceLevel"], [13, 4, 1, "", "DynamicProbing"], [13, 4, 1, "", "DynamicProbingStrength"], [13, 4, 1, "", "ElementInferenceLevel"], [13, 4, 1, "", "FailLimit"], [13, 4, 1, "", "FailureDirectedSearch"], [13, 4, 1, "", "FailureDirectedSearchEmphasis"], [13, 4, 1, "", "FailureDirectedSearchMaxMemory"], [13, 4, 1, "", "IntervalSequenceInferenceLevel"], [13, 4, 1, "", "KPIDisplay"], [13, 4, 1, "", "LogPeriod"], [13, 4, 1, "", "LogVerbosity"], [13, 4, 1, "", "ModelAnonymizer"], [13, 4, 1, "", "MultiPointNumberOfSearchPoints"], [13, 4, 1, "", "NoOverlapInferenceLevel"], [13, 4, 1, "", "OptimalityTolerance"], [13, 4, 1, "", "PrecedenceInferenceLevel"], [13, 4, 1, "", "Presolve"], [13, 4, 1, "", "PrintModelDetailsInMessages"], [13, 4, 1, "", "RandomSeed"], [13, 4, 1, "", "RelativeOptimalityTolerance"], [13, 4, 1, "", "RestartFailLimit"], [13, 4, 1, "", "RestartGrowthFactor"], [13, 4, 1, "", "SearchType"], [13, 4, 1, "", "SequenceInferenceLevel"], [13, 4, 1, "", "SolutionLimit"], [13, 4, 1, "", "StateFunctionInferenceLevel"], [13, 4, 1, "", "TemporalRelaxation"], [13, 4, 1, "", "TimeLimit"], [13, 4, 1, "", "TimeMode"], [13, 4, 1, "", "UseFileLocations"], [13, 4, 1, "", "WarningLevel"], [13, 4, 1, "", "Workers"], [13, 2, 1, "", "add"], [13, 2, 1, "", "get_AllDiffInferenceLevel"], [13, 2, 1, "", "get_AllMinDistanceInferenceLevel"], [13, 2, 1, "", "get_AutomaticReplay"], [13, 2, 1, "", "get_BranchLimit"], [13, 2, 1, "", "get_ChoicePointLimit"], [13, 2, 1, "", "get_ConflictRefinerBranchLimit"], [13, 2, 1, "", "get_ConflictRefinerFailLimit"], [13, 2, 1, "", "get_ConflictRefinerIterationLimit"], [13, 2, 1, "", "get_ConflictRefinerOnVariables"], [13, 2, 1, "", "get_ConflictRefinerTimeLimit"], [13, 2, 1, "", "get_CountDifferentInferenceLevel"], [13, 2, 1, "", "get_CountInferenceLevel"], [13, 2, 1, "", "get_CumulFunctionInferenceLevel"], [13, 2, 1, "", "get_DefaultInferenceLevel"], [13, 2, 1, "", "get_DistributeInferenceLevel"], [13, 2, 1, "", "get_DynamicProbing"], [13, 2, 1, "", "get_DynamicProbingStrength"], [13, 2, 1, "", "get_ElementInferenceLevel"], [13, 2, 1, "", "get_FailLimit"], [13, 2, 1, "", "get_FailureDirectedSearch"], [13, 2, 1, "", "get_FailureDirectedSearchEmphasis"], [13, 2, 1, "", "get_FailureDirectedSearchMaxMemory"], [13, 2, 1, "", "get_IntervalSequenceInferenceLevel"], [13, 2, 1, "", "get_KPIDisplay"], [13, 2, 1, "", "get_LogPeriod"], [13, 2, 1, "", "get_LogVerbosity"], [13, 2, 1, "", "get_ModelAnonymizer"], [13, 2, 1, "", "get_MultiPointNumberOfSearchPoints"], [13, 2, 1, "", "get_NoOverlapInferenceLevel"], [13, 2, 1, "", "get_OptimalityTolerance"], [13, 2, 1, "", "get_PrecedenceInferenceLevel"], [13, 2, 1, "", "get_Presolve"], [13, 2, 1, "", "get_PrintModelDetailsInMessages"], [13, 2, 1, "", "get_RandomSeed"], [13, 2, 1, "", "get_RelativeOptimalityTolerance"], [13, 2, 1, "", "get_RestartFailLimit"], [13, 2, 1, "", "get_RestartGrowthFactor"], [13, 2, 1, "", "get_SearchType"], [13, 2, 1, "", "get_SequenceInferenceLevel"], [13, 2, 1, "", "get_SolutionLimit"], [13, 2, 1, "", "get_StateFunctionInferenceLevel"], [13, 2, 1, "", "get_TemporalRelaxation"], [13, 2, 1, "", "get_TimeLimit"], [13, 2, 1, "", "get_TimeMode"], [13, 2, 1, "", "get_UseFileLocations"], [13, 2, 1, "", "get_WarningLevel"], [13, 2, 1, "", "get_Workers"], [13, 2, 1, "", "get_default_value"], [13, 2, 1, "", "read_ops_file"], [13, 2, 1, "", "reset_to_default"]], "docplex.cp.solution": [[14, 1, 1, "", "CpoFloatVarSolution"], [14, 1, 1, "", "CpoIntVarSolution"], [14, 1, 1, "", "CpoIntervalVarSolution"], [14, 1, 1, "", "CpoModelSolution"], [14, 1, 1, "", "CpoProcessInfos"], [14, 1, 1, "", "CpoRefineConflictResult"], [14, 1, 1, "", "CpoRunResult"], [14, 1, 1, "", "CpoSequenceVarSolution"], [14, 1, 1, "", "CpoSolveResult"], [14, 1, 1, "", "CpoSolverInfos"], [14, 1, 1, "", "CpoStateFunctionSolution"], [14, 1, 1, "", "CpoVarSolution"], [14, 1, 1, "", "IntervalVarPartialValue"], [14, 1, 1, "", "IntervalVarValue"]], "docplex.cp.solution.CpoFloatVarSolution": [[14, 2, 1, "", "get_domain_max"], [14, 2, 1, "", "get_domain_min"], [14, 2, 1, "", "get_value"]], "docplex.cp.solution.CpoIntVarSolution": [[14, 2, 1, "", "domain_contains"], [14, 2, 1, "", "domain_iterator"], [14, 2, 1, "", "get_domain_max"], [14, 2, 1, "", "get_domain_min"], [14, 2, 1, "", "get_value"]], "docplex.cp.solution.CpoIntervalVarSolution": [[14, 2, 1, "", "get_end"], [14, 2, 1, "", "get_length"], [14, 2, 1, "", "get_size"], [14, 2, 1, "", "get_start"], [14, 2, 1, "", "get_value"], [14, 2, 1, "", "is_absent"], [14, 2, 1, "", "is_optional"], [14, 2, 1, "", "is_present"]], "docplex.cp.solution.CpoModelSolution": [[14, 2, 1, "", "add_integer_var_solution"], [14, 2, 1, "", "add_interval_var_solution"], [14, 2, 1, "", "add_kpi_value"], [14, 2, 1, "", "add_var"], [14, 2, 1, "", "add_var_solution"], [14, 2, 1, "", "get_all_var_solutions"], [14, 2, 1, "", "get_as_constraints"], [14, 2, 1, "", "get_kpi_value"], [14, 2, 1, "", "get_kpis"], [14, 2, 1, "", "get_objective_bound"], [14, 2, 1, "", "get_objective_bounds"], [14, 2, 1, "", "get_objective_gap"], [14, 2, 1, "", "get_objective_gaps"], [14, 2, 1, "", "get_objective_value"], [14, 2, 1, "", "get_objective_values"], [14, 2, 1, "", "get_value"], [14, 2, 1, "", "get_var_solution"], [14, 2, 1, "", "has_var_solutions"], [14, 2, 1, "", "is_empty"], [14, 2, 1, "", "map_solution"], [14, 2, 1, "", "print_solution"], [14, 2, 1, "", "set_value"], [14, 2, 1, "", "write"]], "docplex.cp.solution.CpoProcessInfos": [[14, 2, 1, "", "get_model_build_time"], [14, 2, 1, "", "get_solver_version"], [14, 2, 1, "", "get_total_solve_time"]], "docplex.cp.solution.CpoRefineConflictResult": [[14, 2, 1, "", "get_all_member_constraints"], [14, 2, 1, "", "get_all_member_variables"], [14, 2, 1, "", "get_all_possible_constraints"], [14, 2, 1, "", "get_all_possible_variables"], [14, 2, 1, "", "get_conflict_status"], [14, 2, 1, "", "get_cpo"], [14, 2, 1, "", "get_member_constraints"], [14, 2, 1, "", "get_member_variables"], [14, 2, 1, "", "get_possible_constraints"], [14, 2, 1, "", "get_possible_variables"], [14, 2, 1, "", "is_conflict"], [14, 2, 1, "", "print_conflict"], [14, 2, 1, "", "write"]], "docplex.cp.solution.CpoRunResult": [[14, 2, 1, "", "get_info"], [14, 2, 1, "", "get_infos"], [14, 2, 1, "", "get_model"], [14, 2, 1, "", "get_parameter"], [14, 2, 1, "", "get_parameters"], [14, 2, 1, "", "get_process_info"], [14, 2, 1, "", "get_process_infos"], [14, 2, 1, "", "get_solver_info"], [14, 2, 1, "", "get_solver_infos"], [14, 2, 1, "", "get_solver_log"]], "docplex.cp.solution.CpoSequenceVarSolution": [[14, 2, 1, "", "get_interval_variables"], [14, 2, 1, "", "get_value"]], "docplex.cp.solution.CpoSolveResult": [[14, 2, 1, "", "get_all_var_solutions"], [14, 2, 1, "", "get_fail_status"], [14, 2, 1, "", "get_kpis"], [14, 2, 1, "", "get_objective_bound"], [14, 2, 1, "", "get_objective_bounds"], [14, 2, 1, "", "get_objective_gap"], [14, 2, 1, "", "get_objective_gaps"], [14, 2, 1, "", "get_objective_value"], [14, 2, 1, "", "get_objective_values"], [14, 2, 1, "", "get_search_status"], [14, 2, 1, "", "get_solution"], [14, 2, 1, "", "get_solve_status"], [14, 2, 1, "", "get_solve_time"], [14, 2, 1, "", "get_stop_cause"], [14, 2, 1, "", "get_value"], [14, 2, 1, "", "get_var_solution"], [14, 2, 1, "", "is_new_solution"], [14, 2, 1, "", "is_solution"], [14, 2, 1, "", "is_solution_optimal"], [14, 2, 1, "", "map_solution"], [14, 2, 1, "", "print_solution"], [14, 2, 1, "", "write"], [14, 2, 1, "", "write_in_string"]], "docplex.cp.solution.CpoSolverInfos": [[14, 2, 1, "", "get_memory_usage"], [14, 2, 1, "", "get_number_of_branches"], [14, 2, 1, "", "get_number_of_constraints"], [14, 2, 1, "", "get_number_of_fails"], [14, 2, 1, "", "get_number_of_integer_vars"], [14, 2, 1, "", "get_number_of_interval_vars"], [14, 2, 1, "", "get_number_of_sequence_vars"], [14, 2, 1, "", "get_number_of_solutions"], [14, 2, 1, "", "get_solve_time"], [14, 2, 1, "", "get_total_time"]], "docplex.cp.solution.CpoStateFunctionSolution": [[14, 2, 1, "", "get_function_steps"], [14, 2, 1, "", "get_value"]], "docplex.cp.solution.CpoVarSolution": [[14, 2, 1, "", "get_expr"], [14, 2, 1, "", "get_name"], [14, 2, 1, "", "get_value"], [14, 2, 1, "", "get_var"]], "docplex.cp.solution.IntervalVarPartialValue": [[14, 7, 1, "", "end"], [14, 7, 1, "", "length"], [14, 7, 1, "", "size"], [14, 7, 1, "", "start"]], "docplex.cp.solution.IntervalVarValue": [[14, 7, 1, "", "end"], [14, 7, 1, "", "size"], [14, 7, 1, "", "start"]], "docplex.cp.solver": [[15, 0, 0, "-", "cpo_callback"], [16, 0, 0, "-", "solver"], [17, 0, 0, "-", "solver_listener"]], "docplex.cp.solver.cpo_callback": [[15, 1, 1, "", "CpoCallback"]], "docplex.cp.solver.cpo_callback.CpoCallback": [[15, 2, 1, "", "invoke"]], "docplex.cp.solver.solver": [[16, 1, 1, "", "CpoSolver"], [16, 1, 1, "", "CpoSolverAgent"], [16, 6, 1, "", "CpoSolverException"], [16, 3, 1, "", "get_solver_version"], [16, 3, 1, "", "get_version_info"]], "docplex.cp.solver.solver.CpoSolver": [[16, 2, 1, "", "add_callback"], [16, 2, 1, "", "add_listener"], [16, 2, 1, "", "end_search"], [16, 2, 1, "", "explain_failure"], [16, 2, 1, "", "get_cpo_model_string"], [16, 2, 1, "", "get_last_result"], [16, 2, 1, "", "get_last_solution"], [16, 2, 1, "", "get_model"], [16, 2, 1, "", "get_model_format_version"], [16, 2, 1, "", "get_parameters"], [16, 2, 1, "", "get_solver_version"], [16, 2, 1, "", "propagate"], [16, 2, 1, "", "refine_conflict"], [16, 2, 1, "", "remove_callback"], [16, 2, 1, "", "remove_listener"], [16, 2, 1, "", "run_seeds"], [16, 2, 1, "", "search_next"], [16, 2, 1, "", "set_solve_with_search_next"], [16, 2, 1, "", "solve"], [16, 2, 1, "", "solve_with_search_next"]], "docplex.cp.solver.solver.CpoSolverAgent": [[16, 2, 1, "", "abort_search"], [16, 2, 1, "", "end"], [16, 2, 1, "", "end_search"], [16, 2, 1, "", "propagate"], [16, 2, 1, "", "refine_conflict"], [16, 2, 1, "", "run_seeds"], [16, 2, 1, "", "search_next"], [16, 2, 1, "", "set_explain_failure_tags"], [16, 2, 1, "", "solve"], [16, 2, 1, "", "start_search"]], "docplex.cp.solver.solver_listener": [[17, 1, 1, "", "AutoStopListener"], [17, 1, 1, "", "CpoSolverListener"], [17, 1, 1, "", "DelayListener"], [17, 1, 1, "", "LogSolverListener"], [17, 1, 1, "", "SolverProgressPanelListener"]], "docplex.cp.solver.solver_listener.AutoStopListener": [[17, 2, 1, "", "end_solve"], [17, 2, 1, "", "result_found"], [17, 2, 1, "", "start_solve"]], "docplex.cp.solver.solver_listener.CpoSolverListener": [[17, 2, 1, "", "conflict_found"], [17, 2, 1, "", "end_operation"], [17, 2, 1, "", "end_refine_conflict"], [17, 2, 1, "", "end_solve"], [17, 2, 1, "", "new_log_data"], [17, 2, 1, "", "new_result"], [17, 2, 1, "", "result_found"], [17, 2, 1, "", "solver_created"], [17, 2, 1, "", "start_operation"], [17, 2, 1, "", "start_refine_conflict"], [17, 2, 1, "", "start_solve"]], "docplex.cp.solver.solver_listener.DelayListener": [[17, 2, 1, "", "result_found"]], "docplex.cp.solver.solver_listener.LogSolverListener": [[17, 2, 1, "", "end_operation"], [17, 2, 1, "", "new_result"], [17, 2, 1, "", "solver_created"], [17, 2, 1, "", "start_operation"]], "docplex.cp.utils": [[18, 1, 1, "", "Barrier"], [18, 1, 1, "", "Chrono"], [18, 1, 1, "", "Context"], [18, 6, 1, "", "CpoException"], [18, 6, 1, "", "CpoNotSupportedException"], [18, 1, 1, "", "FunctionCache"], [18, 1, 1, "", "IdAllocator"], [18, 1, 1, "", "IdentityAccessor"], [18, 1, 1, "", "InfoDict"], [18, 1, 1, "", "KeyIdDict"], [18, 1, 1, "", "ListDict"], [18, 1, 1, "", "ObjectCache"], [18, 1, 1, "", "ObjectCacheById"], [18, 1, 1, "", "PersistentContext"], [18, 1, 1, "", "SafeIdAllocator"], [18, 1, 1, "", "TextFileLineReader"], [18, 3, 1, "", "assert_arg_int_interval"], [18, 3, 1, "", "check_default"], [18, 3, 1, "", "compare_natural"], [18, 3, 1, "", "create_stdout_logger"], [18, 3, 1, "", "decode_integer_big_endian_4"], [18, 3, 1, "", "encode_csv_string"], [18, 3, 1, "", "encode_integer_big_endian_4"], [18, 3, 1, "", "equals"], [18, 3, 1, "", "format_text"], [18, 3, 1, "", "get_file_name_only"], [18, 3, 1, "", "get_main_file"], [18, 3, 1, "", "get_module_element_from_path"], [18, 3, 1, "", "get_module_version"], [18, 3, 1, "", "get_system_path"], [18, 3, 1, "", "int_to_base"], [18, 3, 1, "", "is_array"], [18, 3, 1, "", "is_array_of_type"], [18, 3, 1, "", "is_bool"], [18, 3, 1, "", "is_exe_file"], [18, 3, 1, "", "is_float"], [18, 3, 1, "", "is_in"], [18, 3, 1, "", "is_in_notebook"], [18, 3, 1, "", "is_int"], [18, 3, 1, "", "is_int_array"], [18, 3, 1, "", "is_int_value"], [18, 3, 1, "", "is_iterable"], [18, 3, 1, "", "is_number"], [18, 3, 1, "", "is_panda_series"], [18, 3, 1, "", "is_string"], [18, 3, 1, "", "is_symbol"], [18, 3, 1, "", "is_symbol_char"], [18, 3, 1, "", "is_tuple"], [18, 3, 1, "", "list_module_public_functions"], [18, 3, 1, "", "make_directories"], [18, 3, 1, "", "make_unicode"], [18, 3, 1, "", "open_utf8"], [18, 3, 1, "", "parse_json_string"], [18, 3, 1, "", "read_string_file"], [18, 3, 1, "", "replace"], [18, 3, 1, "", "replace_in_tuple"], [18, 3, 1, "", "search_exec_file"], [18, 3, 1, "", "string_to_value"], [18, 3, 1, "", "to_compact_SI"], [18, 3, 1, "", "to_internal_string"], [18, 3, 1, "", "to_printable_id"], [18, 3, 1, "", "to_printable_string"], [18, 3, 1, "", "to_string"], [18, 3, 1, "", "write_checking_unicode_errors"], [18, 3, 1, "", "write_string_file"]], "docplex.cp.utils.Barrier": [[18, 2, 1, "", "wait"]], "docplex.cp.utils.Chrono": [[18, 2, 1, "", "get_elapsed"], [18, 2, 1, "", "get_start"], [18, 2, 1, "", "restart"]], "docplex.cp.utils.Context": [[18, 2, 1, "", "clone"], [18, 2, 1, "", "del_attribute"], [18, 2, 1, "", "export_flat"], [18, 2, 1, "", "export_flat_as_string"], [18, 2, 1, "", "get_attribute"], [18, 2, 1, "", "get_by_path"], [18, 2, 1, "", "get_log_output"], [18, 2, 1, "", "get_parent"], [18, 2, 1, "", "get_root"], [18, 2, 1, "", "import_flat"], [18, 2, 1, "", "is_log_enabled"], [18, 2, 1, "", "log"], [18, 2, 1, "", "print_context"], [18, 2, 1, "", "search_and_replace_attribute"], [18, 2, 1, "", "set_attribute"], [18, 2, 1, "", "set_by_path"], [18, 2, 1, "", "set_other"], [18, 2, 1, "", "write"]], "docplex.cp.utils.FunctionCache": [[18, 2, 1, "", "clear"], [18, 2, 1, "", "get"]], "docplex.cp.utils.IdAllocator": [[18, 2, 1, "", "allocate"], [18, 2, 1, "", "get_count"], [18, 2, 1, "", "get_prefix"]], "docplex.cp.utils.InfoDict": [[18, 2, 1, "", "clone"], [18, 2, 1, "", "incr"], [18, 2, 1, "", "print_infos"], [18, 2, 1, "", "write"]], "docplex.cp.utils.KeyIdDict": [[18, 2, 1, "", "clear"], [18, 2, 1, "", "get"], [18, 2, 1, "", "keys"], [18, 2, 1, "", "set"], [18, 2, 1, "", "values"]], "docplex.cp.utils.ListDict": [[18, 2, 1, "", "append"]], "docplex.cp.utils.ObjectCache": [[18, 2, 1, "", "clear"], [18, 2, 1, "", "get"], [18, 2, 1, "", "keys"], [18, 2, 1, "", "set"], [18, 2, 1, "", "size"], [18, 2, 1, "", "values"]], "docplex.cp.utils.ObjectCacheById": [[18, 2, 1, "", "clear"], [18, 2, 1, "", "get"], [18, 2, 1, "", "keys"], [18, 2, 1, "", "set"], [18, 2, 1, "", "values"]], "docplex.cp.utils.PersistentContext": [[18, 2, 1, "", "save"]], "docplex.cp.utils.SafeIdAllocator": [[18, 2, 1, "", "allocate"], [18, 2, 1, "", "get_count"], [18, 2, 1, "", "get_prefix"], [18, 2, 1, "", "reset"]], "docplex.cp.utils.TextFileLineReader": [[18, 2, 1, "", "close"], [18, 2, 1, "", "readline"]], "docplex.cp.utils_visu": [[19, 3, 1, "", "function"], [19, 3, 1, "", "interval"], [19, 3, 1, "", "is_visu_enabled"], [19, 3, 1, "", "matrix"], [19, 3, 1, "", "naming"], [19, 3, 1, "", "panel"], [19, 3, 1, "", "pause"], [19, 3, 1, "", "segment"], [19, 3, 1, "", "sequence"], [19, 3, 1, "", "show"], [19, 3, 1, "", "timeline"], [19, 3, 1, "", "transition"]], "docplex.util": [[20, 0, 0, "-", "environment"]], "docplex.util.environment": [[20, 1, 1, "", "AbstractLocalEnvironment"], [20, 1, 1, "", "Environment"], [20, 1, 1, "", "LocalEnvironment"], [20, 6, 1, "", "NotAvailableError"], [20, 1, 1, "", "OutputAttachmentTransaction"], [20, 1, 1, "", "OverrideEnvironment"], [20, 1, 1, "", "SolveDetailsFilter"], [20, 3, 1, "", "add_abort_callback"], [20, 3, 1, "", "default_solution_storage_handler"], [20, 3, 1, "", "get_available_core_count"], [20, 3, 1, "", "get_environment"], [20, 3, 1, "", "get_input_stream"], [20, 3, 1, "", "get_output_stream"], [20, 3, 1, "", "get_parameter"], [20, 3, 1, "", "make_attachment_name"], [20, 3, 1, "", "maketrans"], [20, 3, 1, "", "read_df"], [20, 3, 1, "", "remove_abort_callback"], [20, 3, 1, "", "set_output_attachment"], [20, 3, 1, "", "set_output_attachments"], [20, 3, 1, "", "translate"], [20, 3, 1, "", "update_solve_details"], [20, 3, 1, "", "write_df"]], "docplex.util.environment.AbstractLocalEnvironment": [[20, 2, 1, "", "get_available_core_count"], [20, 2, 1, "", "get_input_stream"], [20, 2, 1, "", "get_output_stream"], [20, 2, 1, "", "get_parameter"], [20, 2, 1, "", "get_parameters"], [20, 2, 1, "", "set_output_attachment"], [20, 2, 1, "", "set_output_attachments"]], "docplex.util.environment.Environment": [[20, 7, 1, "", "abort_callbacks"], [20, 2, 1, "", "create_transaction"], [20, 2, 1, "", "get_available_core_count"], [20, 2, 1, "", "get_engine_log_level"], [20, 2, 1, "", "get_input_stream"], [20, 2, 1, "", "get_output_stream"], [20, 2, 1, "", "get_parameter"], [20, 2, 1, "", "get_parameters"], [20, 2, 1, "", "get_stop_callback"], [20, 2, 1, "", "is_debug_mode"], [20, 2, 1, "", "publish_solve_details"], [20, 2, 1, "", "read_df"], [20, 7, 1, "", "record_history_fields"], [20, 7, 1, "", "record_history_size"], [20, 7, 1, "", "record_interval"], [20, 2, 1, "", "set_output_attachment"], [20, 2, 1, "", "set_output_attachments"], [20, 2, 1, "", "set_stop_callback"], [20, 7, 1, "", "solution_storage_handler"], [20, 4, 1, "", "stop_callback"], [20, 2, 1, "", "store_solution"], [20, 2, 1, "", "update_solve_details"], [20, 2, 1, "", "write_df"]], "docplex.util.environment.OutputAttachmentTransaction": [[20, 2, 1, "", "close"], [20, 2, 1, "", "commit"], [20, 2, 1, "", "set_output_attachments"]], "docplex.util.environment.SolveDetailsFilter": [[20, 2, 1, "", "filter"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:property", "5": "py:data", "6": "py:exception", "7": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"], "6": ["py", "exception", "Python exception"], "7": ["py", "attribute", "Python attribute"]}, "titleterms": {"readm": 0, "md": 0, "basic": [1, 2, 3, 4, 24], "color": 1, "py": [1, 2, 3, 4, 25, 26, 27, 28, 29, 30, 31, 32], "exampl": [1, 2, 3, 4, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32], "golomb_rul": 2, "n_queen": 3, "truck_fleet": 4, "creat": 5, "constraint": [5, 21, 22, 24], "program": [5, 21, 22, 24], "model": [5, 6, 7, 11, 12, 21, 22], "build": 5, "express": [5, 8], "map": 5, "python": [5, 21, 22], "object": 5, "cp": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23], "optim": [5, 22], "special": 5, "function": [5, 6, 9, 12], "renam": 5, "oper": 5, "overload": 5, "quickest": 5, "approach": 5, "us": [5, 6], "modul": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "factori": 5, "solv": [5, 7, 21], "local": [5, 7, 21], "solver": [5, 15, 16, 17, 21], "option": 5, "paramet": [5, 7, 13], "retriev": 5, "result": 5, "gener": [5, 7], "cpo": 5, "file": [5, 7], "get": [5, 21], "string": 5, "advanc": 5, "configur": [5, 7], "api": 5, "chang": 5, "default": 5, "displai": 5, "current": 5, "attribut": 5, "docplex": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "blackbox": 6, "defin": 6, "evalu": 6, "detail": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19], "descript": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19], "config": 7, "agent": 7, "lib": 7, "search": [7, 12], "execut": 7, "librari": [7, 21], "best": 7, "perform": 7, "fzn": 10, "fzn_parser": 10, "core": 12, "schedul": [12, 24], "phase": 12, "summari": 13, "privat": 13, "solut": 14, "cpo_callback": 15, "solver_listen": 17, "util": [18, 20], "utils_visu": 19, "environ": 20, "start": 21, "instal": 21, "system": 21, "requir": 21, "develop": 21, "tool": 21, "cplex": 21, "test": 21, "an": 21, "what": 22, "i": 22, "decis": 22, "contact": 22, "indic": [22, 23], "tabl": [22, 23], "refer": 23, "manual": 23, "download": 24, "content": 24, "sourc": 24, "repres": 24, "visual": 24, "jupyt": 24, "run": 24, "visu": [25, 26, 27, 28, 29, 30, 31, 32], "flow_shop": 25, "house_building_calendar": 26, "house_building_opt": 27, "job_shop_bas": 28, "open_shop": 29, "rcpsp": 30, "setup_tim": 31, "squaring_squar": 32}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 58}, "alltitles": {"README.md": [[0, "readme-md"]], "basic/color.py example": [[1, "basic-color-py-example"]], "basic/golomb_ruler.py example": [[2, "basic-golomb-ruler-py-example"]], "basic/n_queen.py example": [[3, "basic-n-queen-py-example"]], "basic/truck_fleet.py example": [[4, "basic-truck-fleet-py-example"]], "Creating a constraint programming model": [[5, "creating-a-constraint-programming-model"]], "Build model expressions": [[5, "build-model-expressions"]], "Mapping of Python objects to CP Optimizer objects": [[5, "mapping-of-python-objects-to-cp-optimizer-objects"]], "Special function renaming": [[5, "special-function-renaming"]], "Operator overloading": [[5, "operator-overloading"]], "Build a model": [[5, "build-a-model"]], "Quickest modeling approach": [[5, "quickest-modeling-approach"]], "Use module as a factory": [[5, "use-module-as-a-factory"]], "Use model object as a factory": [[5, "use-model-object-as-a-factory"]], "Solving a model": [[5, "solving-a-model"]], "Solve a model with local solver": [[5, "solve-a-model-with-local-solver"]], "Solving options": [[5, "solving-options"]], "Solving parameters": [[5, "solving-parameters"]], "Retrieve results": [[5, "retrieve-results"]], "Generate CPO file": [[5, "generate-cpo-file"]], "Generation options": [[5, "generation-options"]], "Get the CP Optimizer model as a string": [[5, "get-the-cp-optimizer-model-as-a-string"]], "Advanced configuration": [[5, "advanced-configuration"]], "API configuration": [[5, "api-configuration"]], "Change the default configuration": [[5, "change-the-default-configuration"]], "Display current configuration": [[5, "display-current-configuration"]], "Configuration attributes": [[5, "configuration-attributes"]], "Module docplex.cp.blackbox": [[6, "module-docplex-cp-blackbox"]], "Defining a blackbox function": [[6, "defining-a-blackbox-function"]], "Evaluating a blackbox function": [[6, "evaluating-a-blackbox-function"]], "Using a blackbox function in a model": [[6, "using-a-blackbox-function-in-a-model"]], "Detailed description": [[6, "detailed-description"], [7, "detailed-description"], [8, "detailed-description"], [9, "detailed-description"], [10, "detailed-description"], [11, "detailed-description"], [12, "detailed-description"], [13, "detailed-description"], [14, "detailed-description"], [15, "detailed-description"], [16, "detailed-description"], [17, "detailed-description"], [19, "detailed-description"]], "Module docplex.cp.config": [[7, "module-docplex-cp-config"]], "General parameters": [[7, "general-parameters"]], "Configuration of the model solving": [[7, "configuration-of-the-model-solving"]], "Configuration of the local solving agent": [[7, "configuration-of-the-local-solving-agent"]], "Configuration of the lib solving agent": [[7, "configuration-of-the-lib-solving-agent"]], "Search for executable or library files": [[7, "search-for-executable-or-library-files"]], "Configuration for best performances": [[7, "configuration-for-best-performances"]], "Module docplex.cp.expression": [[8, "module-docplex-cp-expression"]], "Module docplex.cp.function": [[9, "module-docplex-cp-function"]], "Module docplex.cp.fzn.fzn_parser": [[10, "module-docplex-cp-fzn-fzn-parser"]], "Module docplex.cp.model": [[11, "module-docplex-cp-model"]], "Module docplex.cp.modeler": [[12, "module-docplex-cp-modeler"]], "Core CP modeling functions": [[12, "core-cp-modeling-functions"]], "Scheduling functions": [[12, "scheduling-functions"]], "Search phases": [[12, "search-phases"]], "Module docplex.cp.parameters": [[13, "module-docplex-cp-parameters"]], "Summary of parameters": [[13, "summary-of-parameters"]], "Private parameters": [[13, "private-parameters"]], "Module docplex.cp.solution": [[14, "module-docplex-cp-solution"]], "Module docplex.cp.solver.cpo_callback": [[15, "module-docplex-cp-solver-cpo-callback"]], "Module docplex.cp.solver.solver": [[16, "module-docplex-cp-solver-solver"]], "Module docplex.cp.solver.solver_listener": [[17, "module-docplex-cp-solver-solver-listener"]], "Module docplex.cp.utils": [[18, "module-docplex-cp-utils"]], "Module docplex.cp.utils_visu": [[19, "module-docplex-cp-utils-visu"]], "Module docplex.util.environment": [[20, "module-docplex-util-environment"]], "Getting started with constraint programming in DOcplex": [[21, "getting-started-with-constraint-programming-in-docplex"]], "Installation": [[21, "installation"]], "System requirements": [[21, "system-requirements"]], "Get Python development tools": [[21, "get-python-development-tools"]], "Install the CPLEX modeling library": [[21, "install-the-cplex-modeling-library"]], "Solve model with a local solver": [[21, "solve-model-with-a-local-solver"]], "Test an example": [[21, "test-an-example"]], "Constraint Programming Modeling for Python (DOcplex.CP)": [[22, "constraint-programming-modeling-for-python-docplex-cp"]], "What is Decision Optimization?": [[22, "what-is-decision-optimization"]], "Constraint Programming Modeling for Python (docplex.cp)": [[22, "id1"]], "Contacts": [[22, "contacts"]], "Indices and tables": [[22, "indices-and-tables"], [23, "indices-and-tables"]], "docplex.cp reference manual": [[23, "docplex-cp-reference-manual"]], "Examples of constraint programming": [[24, "examples-of-constraint-programming"]], "Downloading the examples": [[24, "downloading-the-examples"]], "Examples content and source": [[24, "examples-content-and-source"]], "Representative examples": [[24, "representative-examples"]], "Basic examples": [[24, "basic-examples"]], "Visualization / scheduling examples": [[24, "visualization-scheduling-examples"]], "Jupyter examples": [[24, "jupyter-examples"]], "Running the examples": [[24, "running-the-examples"]], "visu/flow_shop.py example": [[25, "visu-flow-shop-py-example"]], "visu/house_building_calendar.py example": [[26, "visu-house-building-calendar-py-example"]], "visu/house_building_optional.py example": [[27, "visu-house-building-optional-py-example"]], "visu/job_shop_basic.py example": [[28, "visu-job-shop-basic-py-example"]], "visu/open_shop.py example": [[29, "visu-open-shop-py-example"]], "visu/rcpsp.py example": [[30, "visu-rcpsp-py-example"]], "visu/setup_times.py example": [[31, "visu-setup-times-py-example"]], "visu/squaring_square.py example": [[32, "visu-squaring-square-py-example"]]}, "indexentries": {"cpoblackboxfunction (class in docplex.cp.blackbox)": [[6, "docplex.cp.blackbox.CpoBlackboxFunction"]], "cpoblackboxfunctioncall (class in docplex.cp.blackbox)": [[6, "docplex.cp.blackbox.CpoBlackboxFunctionCall"]], "build_model_call() (docplex.cp.blackbox.cpoblackboxfunction method)": [[6, "docplex.cp.blackbox.CpoBlackboxFunction.build_model_call"]], "docplex.cp.blackbox": [[6, "module-docplex.cp.blackbox"]], "eval() (docplex.cp.blackbox.cpoblackboxfunction method)": [[6, "docplex.cp.blackbox.CpoBlackboxFunction.eval"]], "get_arg_types() (docplex.cp.blackbox.cpoblackboxfunction method)": [[6, "docplex.cp.blackbox.CpoBlackboxFunction.get_arg_types"]], "get_cache_size() (docplex.cp.blackbox.cpoblackboxfunction method)": [[6, "docplex.cp.blackbox.CpoBlackboxFunction.get_cache_size"]], "get_dimension() (docplex.cp.blackbox.cpoblackboxfunction method)": [[6, "docplex.cp.blackbox.CpoBlackboxFunction.get_dimension"]], "get_eval_count() (docplex.cp.blackbox.cpoblackboxfunction method)": [[6, "docplex.cp.blackbox.CpoBlackboxFunction.get_eval_count"]], "get_implementation() (docplex.cp.blackbox.cpoblackboxfunction method)": [[6, "docplex.cp.blackbox.CpoBlackboxFunction.get_implementation"]], "get_name() (docplex.cp.blackbox.cpoblackboxfunction method)": [[6, "docplex.cp.blackbox.CpoBlackboxFunction.get_name"]], "has_implementation() (docplex.cp.blackbox.cpoblackboxfunction method)": [[6, "docplex.cp.blackbox.CpoBlackboxFunction.has_implementation"]], "is_global_cache() (docplex.cp.blackbox.cpoblackboxfunction method)": [[6, "docplex.cp.blackbox.CpoBlackboxFunction.is_global_cache"]], "is_parallel_eval() (docplex.cp.blackbox.cpoblackboxfunction method)": [[6, "docplex.cp.blackbox.CpoBlackboxFunction.is_parallel_eval"]], "module": [[6, "module-docplex.cp.blackbox"], [7, "module-docplex.cp.config"], [8, "module-docplex.cp.expression"], [9, "module-docplex.cp.function"], [10, "module-docplex.cp.fzn.fzn_parser"], [11, "module-docplex.cp.model"], [12, "module-docplex.cp.modeler"], [13, "module-docplex.cp.parameters"], [14, "module-docplex.cp.solution"], [15, "module-docplex.cp.solver.cpo_callback"], [16, "module-docplex.cp.solver.solver"], [17, "module-docplex.cp.solver.solver_listener"], [18, "module-docplex.cp.utils"], [19, "module-docplex.cp.utils_visu"], [20, "module-docplex.util.environment"]], "reset_eval_count() (docplex.cp.blackbox.cpoblackboxfunction method)": [[6, "docplex.cp.blackbox.CpoBlackboxFunction.reset_eval_count"]], "set_cache_size() (docplex.cp.blackbox.cpoblackboxfunction method)": [[6, "docplex.cp.blackbox.CpoBlackboxFunction.set_cache_size"]], "set_dimension() (docplex.cp.blackbox.cpoblackboxfunction method)": [[6, "docplex.cp.blackbox.CpoBlackboxFunction.set_dimension"]], "set_global_cache() (docplex.cp.blackbox.cpoblackboxfunction method)": [[6, "docplex.cp.blackbox.CpoBlackboxFunction.set_global_cache"]], "set_implementation() (docplex.cp.blackbox.cpoblackboxfunction method)": [[6, "docplex.cp.blackbox.CpoBlackboxFunction.set_implementation"]], "set_name() (docplex.cp.blackbox.cpoblackboxfunction method)": [[6, "docplex.cp.blackbox.CpoBlackboxFunction.set_name"]], "set_parallel_eval() (docplex.cp.blackbox.cpoblackboxfunction method)": [[6, "docplex.cp.blackbox.CpoBlackboxFunction.set_parallel_eval"]], "docplex.cp.config": [[7, "module-docplex.cp.config"]], "get_default() (in module docplex.cp.config)": [[7, "docplex.cp.config.get_default"]], "set_default() (in module docplex.cp.config)": [[7, "docplex.cp.config.set_default"]], "cpoalias (class in docplex.cp.expression)": [[8, "docplex.cp.expression.CpoAlias"]], "cpoboolvar (class in docplex.cp.expression)": [[8, "docplex.cp.expression.CpoBoolVar"]], "cpoexpr (class in docplex.cp.expression)": [[8, "docplex.cp.expression.CpoExpr"]], "cpofloatvar (class in docplex.cp.expression)": [[8, "docplex.cp.expression.CpoFloatVar"]], "cpofunctioncall (class in docplex.cp.expression)": [[8, "docplex.cp.expression.CpoFunctionCall"]], "cpointvar (class in docplex.cp.expression)": [[8, "docplex.cp.expression.CpoIntVar"]], "cpointervalvar (class in docplex.cp.expression)": [[8, "docplex.cp.expression.CpoIntervalVar"]], "cposequencevar (class in docplex.cp.expression)": [[8, "docplex.cp.expression.CpoSequenceVar"]], "cpostatefunction (class in docplex.cp.expression)": [[8, "docplex.cp.expression.CpoStateFunction"]], "cpotransitionmatrix (class in docplex.cp.expression)": [[8, "docplex.cp.expression.CpoTransitionMatrix"]], "cpovalue (class in docplex.cp.expression)": [[8, "docplex.cp.expression.CpoValue"]], "cpovariable (class in docplex.cp.expression)": [[8, "docplex.cp.expression.CpoVariable"]], "default_integer_variable_domain (in module docplex.cp.expression)": [[8, "docplex.cp.expression.DEFAULT_INTEGER_VARIABLE_DOMAIN"]], "default_interval (in module docplex.cp.expression)": [[8, "docplex.cp.expression.DEFAULT_INTERVAL"]], "infinity (in module docplex.cp.expression)": [[8, "docplex.cp.expression.INFINITY"]], "interval_max (in module docplex.cp.expression)": [[8, "docplex.cp.expression.INTERVAL_MAX"]], "interval_min (in module docplex.cp.expression)": [[8, "docplex.cp.expression.INTERVAL_MIN"]], "int_max (in module docplex.cp.expression)": [[8, "docplex.cp.expression.INT_MAX"]], "int_min (in module docplex.cp.expression)": [[8, "docplex.cp.expression.INT_MIN"]], "integerdomain (class in docplex.cp.expression)": [[8, "docplex.cp.expression.IntegerDomain"]], "negative_infinity (in module docplex.cp.expression)": [[8, "docplex.cp.expression.NEGATIVE_INFINITY"]], "positive_infinity (in module docplex.cp.expression)": [[8, "docplex.cp.expression.POSITIVE_INFINITY"]], "binary_var() (in module docplex.cp.expression)": [[8, "docplex.cp.expression.binary_var"]], "binary_var_dict() (in module docplex.cp.expression)": [[8, "docplex.cp.expression.binary_var_dict"]], "binary_var_list() (in module docplex.cp.expression)": [[8, "docplex.cp.expression.binary_var_list"]], "build_cpo_expr() (in module docplex.cp.expression)": [[8, "docplex.cp.expression.build_cpo_expr"]], "build_cpo_expr_array() (in module docplex.cp.expression)": [[8, "docplex.cp.expression.build_cpo_expr_array"]], "build_cpo_transition_matrix() (in module docplex.cp.expression)": [[8, "docplex.cp.expression.build_cpo_transition_matrix"]], "build_cpo_tupleset() (in module docplex.cp.expression)": [[8, "docplex.cp.expression.build_cpo_tupleset"]], "compare() (docplex.cp.expression.cpoexpr method)": [[8, "docplex.cp.expression.CpoExpr.compare"]], "compare_expressions() (in module docplex.cp.expression)": [[8, "docplex.cp.expression.compare_expressions"]], "docplex.cp.expression": [[8, "module-docplex.cp.expression"]], "domain_contains() (docplex.cp.expression.cpointvar method)": [[8, "docplex.cp.expression.CpoIntVar.domain_contains"]], "domain_iterator() (docplex.cp.expression.cpointvar method)": [[8, "docplex.cp.expression.CpoIntVar.domain_iterator"]], "equals() (docplex.cp.expression.cpoexpr method)": [[8, "docplex.cp.expression.CpoExpr.equals"]], "equals() (docplex.cp.expression.cpofloatvar method)": [[8, "docplex.cp.expression.CpoFloatVar.equals"]], "equals() (docplex.cp.expression.cpointvar method)": [[8, "docplex.cp.expression.CpoIntVar.equals"]], "get_all_values() (docplex.cp.expression.cpotransitionmatrix method)": [[8, "docplex.cp.expression.CpoTransitionMatrix.get_all_values"]], "get_domain() (docplex.cp.expression.cpointvar method)": [[8, "docplex.cp.expression.CpoIntVar.get_domain"]], "get_domain_max() (docplex.cp.expression.cpointvar method)": [[8, "docplex.cp.expression.CpoIntVar.get_domain_max"]], "get_domain_max() (in module docplex.cp.expression)": [[8, "docplex.cp.expression.get_domain_max"]], "get_domain_min() (docplex.cp.expression.cpointvar method)": [[8, "docplex.cp.expression.CpoIntVar.get_domain_min"]], "get_domain_min() (in module docplex.cp.expression)": [[8, "docplex.cp.expression.get_domain_min"]], "get_end() (docplex.cp.expression.cpointervalvar method)": [[8, "docplex.cp.expression.CpoIntervalVar.get_end"]], "get_granularity() (docplex.cp.expression.cpointervalvar method)": [[8, "docplex.cp.expression.CpoIntervalVar.get_granularity"]], "get_intensity() (docplex.cp.expression.cpointervalvar method)": [[8, "docplex.cp.expression.CpoIntervalVar.get_intensity"]], "get_interval_variables() (docplex.cp.expression.cposequencevar method)": [[8, "docplex.cp.expression.CpoSequenceVar.get_interval_variables"]], "get_length() (docplex.cp.expression.cpointervalvar method)": [[8, "docplex.cp.expression.CpoIntervalVar.get_length"]], "get_matrix() (docplex.cp.expression.cpotransitionmatrix method)": [[8, "docplex.cp.expression.CpoTransitionMatrix.get_matrix"]], "get_max_depth() (docplex.cp.expression.cpoexpr method)": [[8, "docplex.cp.expression.CpoExpr.get_max_depth"]], "get_name() (docplex.cp.expression.cpoexpr method)": [[8, "docplex.cp.expression.CpoExpr.get_name"]], "get_node_count() (docplex.cp.expression.cpoexpr method)": [[8, "docplex.cp.expression.CpoExpr.get_node_count"]], "get_node_count() (in module docplex.cp.expression)": [[8, "docplex.cp.expression.get_node_count"]], "get_priority() (docplex.cp.expression.cpoexpr method)": [[8, "docplex.cp.expression.CpoExpr.get_priority"]], "get_priority() (docplex.cp.expression.cpofunctioncall method)": [[8, "docplex.cp.expression.CpoFunctionCall.get_priority"]], "get_size() (docplex.cp.expression.cpointervalvar method)": [[8, "docplex.cp.expression.CpoIntervalVar.get_size"]], "get_size() (docplex.cp.expression.cpotransitionmatrix method)": [[8, "docplex.cp.expression.CpoTransitionMatrix.get_size"]], "get_start() (docplex.cp.expression.cpointervalvar method)": [[8, "docplex.cp.expression.CpoIntervalVar.get_start"]], "get_transition_matrix() (docplex.cp.expression.cpostatefunction method)": [[8, "docplex.cp.expression.CpoStateFunction.get_transition_matrix"]], "get_type() (docplex.cp.expression.cpoexpr method)": [[8, "docplex.cp.expression.CpoExpr.get_type"]], "get_types() (docplex.cp.expression.cposequencevar method)": [[8, "docplex.cp.expression.CpoSequenceVar.get_types"]], "get_value() (docplex.cp.expression.cpotransitionmatrix method)": [[8, "docplex.cp.expression.CpoTransitionMatrix.get_value"]], "get_vars() (docplex.cp.expression.cposequencevar method)": [[8, "docplex.cp.expression.CpoSequenceVar.get_vars"]], "has_name() (docplex.cp.expression.cpoexpr method)": [[8, "docplex.cp.expression.CpoExpr.has_name"]], "integer_var() (in module docplex.cp.expression)": [[8, "docplex.cp.expression.integer_var"]], "integer_var_dict() (in module docplex.cp.expression)": [[8, "docplex.cp.expression.integer_var_dict"]], "integer_var_list() (in module docplex.cp.expression)": [[8, "docplex.cp.expression.integer_var_list"]], "interval_var() (in module docplex.cp.expression)": [[8, "docplex.cp.expression.interval_var"]], "interval_var_dict() (in module docplex.cp.expression)": [[8, "docplex.cp.expression.interval_var_dict"]], "interval_var_list() (in module docplex.cp.expression)": [[8, "docplex.cp.expression.interval_var_list"]], "is_absent() (docplex.cp.expression.cpointervalvar method)": [[8, "docplex.cp.expression.CpoIntervalVar.is_absent"]], "is_binary() (docplex.cp.expression.cpoboolvar method)": [[8, "docplex.cp.expression.CpoBoolVar.is_binary"]], "is_binary() (docplex.cp.expression.cpointvar method)": [[8, "docplex.cp.expression.CpoIntVar.is_binary"]], "is_bool_var() (docplex.cp.expression.cpoboolvar method)": [[8, "docplex.cp.expression.CpoBoolVar.is_bool_var"]], "is_bool_var() (docplex.cp.expression.cpointvar method)": [[8, "docplex.cp.expression.CpoIntVar.is_bool_var"]], "is_cpo_expr() (in module docplex.cp.expression)": [[8, "docplex.cp.expression.is_cpo_expr"]], "is_kind_of() (docplex.cp.expression.cpoexpr method)": [[8, "docplex.cp.expression.CpoExpr.is_kind_of"]], "is_optional() (docplex.cp.expression.cpointervalvar method)": [[8, "docplex.cp.expression.CpoIntervalVar.is_optional"]], "is_present() (docplex.cp.expression.cpointervalvar method)": [[8, "docplex.cp.expression.CpoIntervalVar.is_present"]], "is_type() (docplex.cp.expression.cpoexpr method)": [[8, "docplex.cp.expression.CpoExpr.is_type"]], "is_variable() (docplex.cp.expression.cpoexpr method)": [[8, "docplex.cp.expression.CpoExpr.is_variable"]], "is_variable() (docplex.cp.expression.cpovariable method)": [[8, "docplex.cp.expression.CpoVariable.is_variable"]], "lb (docplex.cp.expression.cpointvar property)": [[8, "docplex.cp.expression.CpoIntVar.lb"]], "pretty_print() (docplex.cp.expression.cpoexpr method)": [[8, "docplex.cp.expression.CpoExpr.pretty_print"]], "pretty_print() (in module docplex.cp.expression)": [[8, "docplex.cp.expression.pretty_print"]], "sequence_var() (in module docplex.cp.expression)": [[8, "docplex.cp.expression.sequence_var"]], "set_absent() (docplex.cp.expression.cpointervalvar method)": [[8, "docplex.cp.expression.CpoIntervalVar.set_absent"]], "set_domain() (docplex.cp.expression.cpointvar method)": [[8, "docplex.cp.expression.CpoIntVar.set_domain"]], "set_end() (docplex.cp.expression.cpointervalvar method)": [[8, "docplex.cp.expression.CpoIntervalVar.set_end"]], "set_end_max() (docplex.cp.expression.cpointervalvar method)": [[8, "docplex.cp.expression.CpoIntervalVar.set_end_max"]], "set_end_min() (docplex.cp.expression.cpointervalvar method)": [[8, "docplex.cp.expression.CpoIntervalVar.set_end_min"]], "set_granularity() (docplex.cp.expression.cpointervalvar method)": [[8, "docplex.cp.expression.CpoIntervalVar.set_granularity"]], "set_intensity() (docplex.cp.expression.cpointervalvar method)": [[8, "docplex.cp.expression.CpoIntervalVar.set_intensity"]], "set_length() (docplex.cp.expression.cpointervalvar method)": [[8, "docplex.cp.expression.CpoIntervalVar.set_length"]], "set_length_max() (docplex.cp.expression.cpointervalvar method)": [[8, "docplex.cp.expression.CpoIntervalVar.set_length_max"]], "set_length_min() (docplex.cp.expression.cpointervalvar method)": [[8, "docplex.cp.expression.CpoIntervalVar.set_length_min"]], "set_name() (docplex.cp.expression.cpoexpr method)": [[8, "docplex.cp.expression.CpoExpr.set_name"]], "set_optional() (docplex.cp.expression.cpointervalvar method)": [[8, "docplex.cp.expression.CpoIntervalVar.set_optional"]], "set_present() (docplex.cp.expression.cpointervalvar method)": [[8, "docplex.cp.expression.CpoIntervalVar.set_present"]], "set_size() (docplex.cp.expression.cpointervalvar method)": [[8, "docplex.cp.expression.CpoIntervalVar.set_size"]], "set_size_max() (docplex.cp.expression.cpointervalvar method)": [[8, "docplex.cp.expression.CpoIntervalVar.set_size_max"]], "set_size_min() (docplex.cp.expression.cpointervalvar method)": [[8, "docplex.cp.expression.CpoIntervalVar.set_size_min"]], "set_start() (docplex.cp.expression.cpointervalvar method)": [[8, "docplex.cp.expression.CpoIntervalVar.set_start"]], "set_start_max() (docplex.cp.expression.cpointervalvar method)": [[8, "docplex.cp.expression.CpoIntervalVar.set_start_max"]], "set_start_min() (docplex.cp.expression.cpointervalvar method)": [[8, "docplex.cp.expression.CpoIntervalVar.set_start_min"]], "set_transition_matrix() (docplex.cp.expression.cpostatefunction method)": [[8, "docplex.cp.expression.CpoStateFunction.set_transition_matrix"]], "set_value() (docplex.cp.expression.cpotransitionmatrix method)": [[8, "docplex.cp.expression.CpoTransitionMatrix.set_value"]], "state_function() (in module docplex.cp.expression)": [[8, "docplex.cp.expression.state_function"]], "transition_matrix() (in module docplex.cp.expression)": [[8, "docplex.cp.expression.transition_matrix"]], "tuple_set() (in module docplex.cp.expression)": [[8, "docplex.cp.expression.tuple_set"]], "ub (docplex.cp.expression.cpointvar property)": [[8, "docplex.cp.expression.CpoIntVar.ub"]], "cpofunction (class in docplex.cp.function)": [[9, "docplex.cp.function.CpoFunction"]], "cposegmentedfunction (class in docplex.cp.function)": [[9, "docplex.cp.function.CpoSegmentedFunction"]], "cpostepfunction (class in docplex.cp.function)": [[9, "docplex.cp.function.CpoStepFunction"]], "add_slope() (docplex.cp.function.cpofunction method)": [[9, "docplex.cp.function.CpoFunction.add_slope"]], "add_value() (docplex.cp.function.cpofunction method)": [[9, "docplex.cp.function.CpoFunction.add_value"]], "copy() (docplex.cp.function.cpofunction method)": [[9, "docplex.cp.function.CpoFunction.copy"]], "docplex.cp.function": [[9, "module-docplex.cp.function"]], "get_segment_list() (docplex.cp.function.cposegmentedfunction method)": [[9, "docplex.cp.function.CpoSegmentedFunction.get_segment_list"]], "get_step_list() (docplex.cp.function.cpostepfunction method)": [[9, "docplex.cp.function.CpoStepFunction.get_step_list"]], "get_value() (docplex.cp.function.cpofunction method)": [[9, "docplex.cp.function.CpoFunction.get_value"]], "set_slope() (docplex.cp.function.cpofunction method)": [[9, "docplex.cp.function.CpoFunction.set_slope"]], "set_value() (docplex.cp.function.cpofunction method)": [[9, "docplex.cp.function.CpoFunction.set_value"]], "fznconstraint (class in docplex.cp.fzn.fzn_parser)": [[10, "docplex.cp.fzn.fzn_parser.FznConstraint"]], "fznobject (class in docplex.cp.fzn.fzn_parser)": [[10, "docplex.cp.fzn.fzn_parser.FznObject"]], "fznobjective (class in docplex.cp.fzn.fzn_parser)": [[10, "docplex.cp.fzn.fzn_parser.FznObjective"]], "fznparameter (class in docplex.cp.fzn.fzn_parser)": [[10, "docplex.cp.fzn.fzn_parser.FznParameter"]], "fznparser (class in docplex.cp.fzn.fzn_parser)": [[10, "docplex.cp.fzn.fzn_parser.FznParser"]], "fznparserexception": [[10, "docplex.cp.fzn.fzn_parser.FznParserException"]], "fznreader (class in docplex.cp.fzn.fzn_parser)": [[10, "docplex.cp.fzn.fzn_parser.FznReader"]], "fznvariable (class in docplex.cp.fzn.fzn_parser)": [[10, "docplex.cp.fzn.fzn_parser.FznVariable"]], "docplex.cp.fzn.fzn_parser": [[10, "module-docplex.cp.fzn.fzn_parser"]], "get_model() (docplex.cp.fzn.fzn_parser.fznparser method)": [[10, "docplex.cp.fzn.fzn_parser.FznParser.get_model"]], "get_output_variables() (docplex.cp.fzn.fzn_parser.fznparser method)": [[10, "docplex.cp.fzn.fzn_parser.FznParser.get_output_variables"]], "is_defined() (docplex.cp.fzn.fzn_parser.fznvariable method)": [[10, "docplex.cp.fzn.fzn_parser.FznVariable.is_defined"]], "is_introduced() (docplex.cp.fzn.fzn_parser.fznvariable method)": [[10, "docplex.cp.fzn.fzn_parser.FznVariable.is_introduced"]], "is_output() (docplex.cp.fzn.fzn_parser.fznvariable method)": [[10, "docplex.cp.fzn.fzn_parser.FznVariable.is_output"]], "parse() (docplex.cp.fzn.fzn_parser.fznparser method)": [[10, "docplex.cp.fzn.fzn_parser.FznParser.parse"]], "parse() (docplex.cp.fzn.fzn_parser.fznreader method)": [[10, "docplex.cp.fzn.fzn_parser.FznReader.parse"]], "parse_string() (docplex.cp.fzn.fzn_parser.fznparser method)": [[10, "docplex.cp.fzn.fzn_parser.FznParser.parse_string"]], "parse_string() (docplex.cp.fzn.fzn_parser.fznreader method)": [[10, "docplex.cp.fzn.fzn_parser.FznReader.parse_string"]], "write() (docplex.cp.fzn.fzn_parser.fznreader method)": [[10, "docplex.cp.fzn.fzn_parser.FznReader.write"]], "cpomodel (class in docplex.cp.model)": [[11, "docplex.cp.model.CpoModel"]], "cpomodelstatistics (class in docplex.cp.model)": [[11, "docplex.cp.model.CpoModelStatistics"]], "add() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.add"]], "add() (docplex.cp.model.cpomodelstatistics method)": [[11, "docplex.cp.model.CpoModelStatistics.add"]], "add_blackbox_function() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.add_blackbox_function"]], "add_constraint() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.add_constraint"]], "add_kpi() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.add_kpi"]], "add_parameters() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.add_parameters"]], "add_search_phase() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.add_search_phase"]], "add_solver_callback() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.add_solver_callback"]], "add_solver_listener() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.add_solver_listener"]], "check_equivalence() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.check_equivalence"]], "clone() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.clone"]], "create_empty_solution() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.create_empty_solution"]], "create_solver() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.create_solver"]], "docplex.cp.model": [[11, "module-docplex.cp.model"]], "equals() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.equals"]], "explain_failure() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.explain_failure"]], "export_as_cpo() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.export_as_cpo"]], "export_model() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.export_model"]], "export_parameters_as_ops_file() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.export_parameters_as_ops_file"]], "get_all_expressions() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.get_all_expressions"]], "get_all_variables() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.get_all_variables"]], "get_blackbox_function() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.get_blackbox_function"]], "get_blackbox_functions() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.get_blackbox_functions"]], "get_cpo_string() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.get_cpo_string"]], "get_format_version() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.get_format_version"]], "get_kpis() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.get_kpis"]], "get_modeling_duration() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.get_modeling_duration"]], "get_name() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.get_name"]], "get_named_expressions_dict() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.get_named_expressions_dict"]], "get_number_of_constraints() (docplex.cp.model.cpomodelstatistics method)": [[11, "docplex.cp.model.CpoModelStatistics.get_number_of_constraints"]], "get_number_of_expressions() (docplex.cp.model.cpomodelstatistics method)": [[11, "docplex.cp.model.CpoModelStatistics.get_number_of_expressions"]], "get_number_of_variables() (docplex.cp.model.cpomodelstatistics method)": [[11, "docplex.cp.model.CpoModelStatistics.get_number_of_variables"]], "get_objective() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.get_objective"]], "get_objective_expression() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.get_objective_expression"]], "get_optimization_expression() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.get_optimization_expression"]], "get_parameters() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.get_parameters"]], "get_source_file() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.get_source_file"]], "get_starting_point() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.get_starting_point"]], "get_statistics() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.get_statistics"]], "import_model() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.import_model"]], "import_model_string() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.import_model_string"]], "is_maximization() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.is_maximization"]], "is_minimization() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.is_minimization"]], "is_satisfaction() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.is_satisfaction"]], "maximize() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.maximize"]], "merge_with_parameters() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.merge_with_parameters"]], "minimize() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.minimize"]], "print_information() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.print_information"]], "propagate() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.propagate"]], "read_ops_file() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.read_ops_file"]], "refine_conflict() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.refine_conflict"]], "remove() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.remove"]], "remove_all_kpis() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.remove_all_kpis"]], "remove_expressions() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.remove_expressions"]], "remove_kpi() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.remove_kpi"]], "remove_solver_callback() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.remove_solver_callback"]], "remove_solver_listener() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.remove_solver_listener"]], "replace_expression() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.replace_expression"]], "run_seeds() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.run_seeds"]], "set_format_version() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.set_format_version"]], "set_parameters() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.set_parameters"]], "set_search_phases() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.set_search_phases"]], "set_starting_point() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.set_starting_point"]], "solve() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.solve"]], "start_search() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.start_search"]], "to_json() (docplex.cp.model.cpomodelstatistics method)": [[11, "docplex.cp.model.CpoModelStatistics.to_json"]], "write() (docplex.cp.model.cpomodelstatistics method)": [[11, "docplex.cp.model.CpoModelStatistics.write"]], "write_information() (docplex.cp.model.cpomodel method)": [[11, "docplex.cp.model.CpoModel.write_information"]], "abs() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.abs"]], "abs_of() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.abs_of"]], "abstraction() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.abstraction"]], "all() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.all"]], "all_diff() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.all_diff"]], "all_min_distance() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.all_min_distance"]], "all_of() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.all_of"]], "allowed_assignments() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.allowed_assignments"]], "alternative() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.alternative"]], "always_constant() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.always_constant"]], "always_equal() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.always_equal"]], "always_in() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.always_in"]], "always_no_state() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.always_no_state"]], "any() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.any"]], "any_of() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.any_of"]], "before() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.before"]], "bool_abstraction() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.bool_abstraction"]], "ceil() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.ceil"]], "conditional() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.conditional"]], "constant() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.constant"]], "coordinate_piecewise_linear() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.coordinate_piecewise_linear"]], "count() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.count"]], "count_different() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.count_different"]], "cumul_range() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.cumul_range"]], "diff() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.diff"]], "distribute() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.distribute"]], "docplex.cp.modeler": [[12, "module-docplex.cp.modeler"]], "domain_max() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.domain_max"]], "domain_min() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.domain_min"]], "domain_size() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.domain_size"]], "element() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.element"]], "end_at_end() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.end_at_end"]], "end_at_start() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.end_at_start"]], "end_before_end() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.end_before_end"]], "end_before_start() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.end_before_start"]], "end_eval() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.end_eval"]], "end_of() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.end_of"]], "end_of_next() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.end_of_next"]], "end_of_prev() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.end_of_prev"]], "equal() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.equal"]], "explicit_value_eval() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.explicit_value_eval"]], "explicit_var_eval() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.explicit_var_eval"]], "exponent() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.exponent"]], "false() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.false"]], "first() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.first"]], "float_div() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.float_div"]], "floor() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.floor"]], "forbid_end() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.forbid_end"]], "forbid_extent() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.forbid_extent"]], "forbid_start() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.forbid_start"]], "forbidden_assignments() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.forbidden_assignments"]], "greater() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.greater"]], "greater_or_equal() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.greater_or_equal"]], "height_at_end() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.height_at_end"]], "height_at_start() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.height_at_start"]], "if_then() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.if_then"]], "impact_of_last_branch() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.impact_of_last_branch"]], "in_range() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.in_range"]], "inferred() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.inferred"]], "int_div() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.int_div"]], "inverse() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.inverse"]], "isomorphism() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.isomorphism"]], "last() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.last"]], "length_eval() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.length_eval"]], "length_of() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.length_of"]], "length_of_next() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.length_of_next"]], "length_of_prev() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.length_of_prev"]], "less() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.less"]], "less_or_equal() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.less_or_equal"]], "lexicographic() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.lexicographic"]], "log() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.log"]], "logical_and() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.logical_and"]], "logical_not() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.logical_not"]], "logical_or() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.logical_or"]], "max() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.max"]], "max_of() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.max_of"]], "maximize() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.maximize"]], "maximize_static_lex() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.maximize_static_lex"]], "member() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.member"]], "min() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.min"]], "min_of() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.min_of"]], "minimize() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.minimize"]], "minimize_static_lex() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.minimize_static_lex"]], "minus() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.minus"]], "mod() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.mod"]], "no_overlap() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.no_overlap"]], "overlap_length() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.overlap_length"]], "pack() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.pack"]], "plus() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.plus"]], "power() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.power"]], "presence_of() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.presence_of"]], "previous() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.previous"]], "pulse() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.pulse"]], "range() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.range"]], "round() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.round"]], "same_common_subsequence() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.same_common_subsequence"]], "same_sequence() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.same_sequence"]], "scal_prod() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.scal_prod"]], "search_phase() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.search_phase"]], "select_largest() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.select_largest"]], "select_random_value() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.select_random_value"]], "select_random_var() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.select_random_var"]], "select_smallest() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.select_smallest"]], "sequence() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.sequence"]], "sgn() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.sgn"]], "size_eval() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.size_eval"]], "size_of() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.size_of"]], "size_of_next() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.size_of_next"]], "size_of_prev() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.size_of_prev"]], "slope_piecewise_linear() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.slope_piecewise_linear"]], "span() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.span"]], "square() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.square"]], "standard_deviation() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.standard_deviation"]], "start_at_end() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.start_at_end"]], "start_at_start() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.start_at_start"]], "start_before_end() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.start_before_end"]], "start_before_start() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.start_before_start"]], "start_eval() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.start_eval"]], "start_of() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.start_of"]], "start_of_next() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.start_of_next"]], "start_of_prev() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.start_of_prev"]], "step_at() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.step_at"]], "step_at_end() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.step_at_end"]], "step_at_start() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.step_at_start"]], "strict_lexicographic() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.strict_lexicographic"]], "strong() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.strong"]], "sub_circuit() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.sub_circuit"]], "sum() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.sum"]], "sum_of() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.sum_of"]], "synchronize() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.synchronize"]], "times() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.times"]], "true() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.true"]], "trunc() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.trunc"]], "type_of_next() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.type_of_next"]], "type_of_prev() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.type_of_prev"]], "value() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.value"]], "value_impact() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.value_impact"]], "value_index() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.value_index"]], "value_success_rate() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.value_success_rate"]], "var_impact() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.var_impact"]], "var_index() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.var_index"]], "var_local_impact() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.var_local_impact"]], "var_success_rate() (in module docplex.cp.modeler)": [[12, "docplex.cp.modeler.var_success_rate"]], "alldiffinferencelevel (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.AllDiffInferenceLevel"]], "allmindistanceinferencelevel (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.AllMinDistanceInferenceLevel"]], "automaticreplay (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.AutomaticReplay"]], "branchlimit (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.BranchLimit"]], "choicepointlimit (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.ChoicePointLimit"]], "conflictrefinerbranchlimit (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.ConflictRefinerBranchLimit"]], "conflictrefinerfaillimit (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.ConflictRefinerFailLimit"]], "conflictrefineriterationlimit (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.ConflictRefinerIterationLimit"]], "conflictrefineronvariables (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.ConflictRefinerOnVariables"]], "conflictrefinertimelimit (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.ConflictRefinerTimeLimit"]], "countdifferentinferencelevel (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.CountDifferentInferenceLevel"]], "countinferencelevel (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.CountInferenceLevel"]], "cpoparameters (class in docplex.cp.parameters)": [[13, "docplex.cp.parameters.CpoParameters"]], "cumulfunctioninferencelevel (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.CumulFunctionInferenceLevel"]], "defaultinferencelevel (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.DefaultInferenceLevel"]], "distributeinferencelevel (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.DistributeInferenceLevel"]], "dynamicprobing (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.DynamicProbing"]], "dynamicprobingstrength (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.DynamicProbingStrength"]], "elementinferencelevel (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.ElementInferenceLevel"]], "faillimit (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.FailLimit"]], "failuredirectedsearch (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.FailureDirectedSearch"]], "failuredirectedsearchemphasis (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.FailureDirectedSearchEmphasis"]], "failuredirectedsearchmaxmemory (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.FailureDirectedSearchMaxMemory"]], "intervalsequenceinferencelevel (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.IntervalSequenceInferenceLevel"]], "kpidisplay (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.KPIDisplay"]], "logperiod (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.LogPeriod"]], "logverbosity (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.LogVerbosity"]], "modelanonymizer (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.ModelAnonymizer"]], "multipointnumberofsearchpoints (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.MultiPointNumberOfSearchPoints"]], "nooverlapinferencelevel (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.NoOverlapInferenceLevel"]], "optimalitytolerance (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.OptimalityTolerance"]], "parameterdescriptor (class in docplex.cp.parameters)": [[13, "docplex.cp.parameters.ParameterDescriptor"]], "precedenceinferencelevel (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.PrecedenceInferenceLevel"]], "presolve (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.Presolve"]], "printmodeldetailsinmessages (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.PrintModelDetailsInMessages"]], "randomseed (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.RandomSeed"]], "relativeoptimalitytolerance (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.RelativeOptimalityTolerance"]], "restartfaillimit (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.RestartFailLimit"]], "restartgrowthfactor (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.RestartGrowthFactor"]], "searchtype (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.SearchType"]], "sequenceinferencelevel (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.SequenceInferenceLevel"]], "solutionlimit (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.SolutionLimit"]], "statefunctioninferencelevel (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.StateFunctionInferenceLevel"]], "temporalrelaxation (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.TemporalRelaxation"]], "timelimit (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.TimeLimit"]], "timemode (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.TimeMode"]], "usefilelocations (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.UseFileLocations"]], "warninglevel (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.WarningLevel"]], "workers (docplex.cp.parameters.cpoparameters property)": [[13, "docplex.cp.parameters.CpoParameters.Workers"]], "add() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.add"]], "docplex.cp.parameters": [[13, "module-docplex.cp.parameters"]], "get_alldiffinferencelevel() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_AllDiffInferenceLevel"]], "get_allmindistanceinferencelevel() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_AllMinDistanceInferenceLevel"]], "get_automaticreplay() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_AutomaticReplay"]], "get_branchlimit() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_BranchLimit"]], "get_choicepointlimit() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_ChoicePointLimit"]], "get_conflictrefinerbranchlimit() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_ConflictRefinerBranchLimit"]], "get_conflictrefinerfaillimit() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_ConflictRefinerFailLimit"]], "get_conflictrefineriterationlimit() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_ConflictRefinerIterationLimit"]], "get_conflictrefineronvariables() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_ConflictRefinerOnVariables"]], "get_conflictrefinertimelimit() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_ConflictRefinerTimeLimit"]], "get_countdifferentinferencelevel() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_CountDifferentInferenceLevel"]], "get_countinferencelevel() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_CountInferenceLevel"]], "get_cumulfunctioninferencelevel() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_CumulFunctionInferenceLevel"]], "get_defaultinferencelevel() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_DefaultInferenceLevel"]], "get_distributeinferencelevel() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_DistributeInferenceLevel"]], "get_dynamicprobing() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_DynamicProbing"]], "get_dynamicprobingstrength() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_DynamicProbingStrength"]], "get_elementinferencelevel() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_ElementInferenceLevel"]], "get_faillimit() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_FailLimit"]], "get_failuredirectedsearch() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_FailureDirectedSearch"]], "get_failuredirectedsearchemphasis() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_FailureDirectedSearchEmphasis"]], "get_failuredirectedsearchmaxmemory() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_FailureDirectedSearchMaxMemory"]], "get_intervalsequenceinferencelevel() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_IntervalSequenceInferenceLevel"]], "get_kpidisplay() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_KPIDisplay"]], "get_logperiod() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_LogPeriod"]], "get_logverbosity() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_LogVerbosity"]], "get_modelanonymizer() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_ModelAnonymizer"]], "get_multipointnumberofsearchpoints() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_MultiPointNumberOfSearchPoints"]], "get_nooverlapinferencelevel() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_NoOverlapInferenceLevel"]], "get_optimalitytolerance() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_OptimalityTolerance"]], "get_precedenceinferencelevel() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_PrecedenceInferenceLevel"]], "get_presolve() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_Presolve"]], "get_printmodeldetailsinmessages() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_PrintModelDetailsInMessages"]], "get_randomseed() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_RandomSeed"]], "get_relativeoptimalitytolerance() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_RelativeOptimalityTolerance"]], "get_restartfaillimit() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_RestartFailLimit"]], "get_restartgrowthfactor() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_RestartGrowthFactor"]], "get_searchtype() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_SearchType"]], "get_sequenceinferencelevel() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_SequenceInferenceLevel"]], "get_solutionlimit() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_SolutionLimit"]], "get_statefunctioninferencelevel() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_StateFunctionInferenceLevel"]], "get_temporalrelaxation() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_TemporalRelaxation"]], "get_timelimit() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_TimeLimit"]], "get_timemode() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_TimeMode"]], "get_usefilelocations() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_UseFileLocations"]], "get_warninglevel() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_WarningLevel"]], "get_workers() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_Workers"]], "get_default_value() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.get_default_value"]], "read_ops_file() (docplex.cp.parameters.cpoparameters class method)": [[13, "docplex.cp.parameters.CpoParameters.read_ops_file"]], "reset_to_default() (docplex.cp.parameters.cpoparameters method)": [[13, "docplex.cp.parameters.CpoParameters.reset_to_default"]], "cpofloatvarsolution (class in docplex.cp.solution)": [[14, "docplex.cp.solution.CpoFloatVarSolution"]], "cpointvarsolution (class in docplex.cp.solution)": [[14, "docplex.cp.solution.CpoIntVarSolution"]], "cpointervalvarsolution (class in docplex.cp.solution)": [[14, "docplex.cp.solution.CpoIntervalVarSolution"]], "cpomodelsolution (class in docplex.cp.solution)": [[14, "docplex.cp.solution.CpoModelSolution"]], "cpoprocessinfos (class in docplex.cp.solution)": [[14, "docplex.cp.solution.CpoProcessInfos"]], "cporefineconflictresult (class in docplex.cp.solution)": [[14, "docplex.cp.solution.CpoRefineConflictResult"]], "cporunresult (class in docplex.cp.solution)": [[14, "docplex.cp.solution.CpoRunResult"]], "cposequencevarsolution (class in docplex.cp.solution)": [[14, "docplex.cp.solution.CpoSequenceVarSolution"]], "cposolveresult (class in docplex.cp.solution)": [[14, "docplex.cp.solution.CpoSolveResult"]], "cposolverinfos (class in docplex.cp.solution)": [[14, "docplex.cp.solution.CpoSolverInfos"]], "cpostatefunctionsolution (class in docplex.cp.solution)": [[14, "docplex.cp.solution.CpoStateFunctionSolution"]], "cpovarsolution (class in docplex.cp.solution)": [[14, "docplex.cp.solution.CpoVarSolution"]], "intervalvarpartialvalue (class in docplex.cp.solution)": [[14, "docplex.cp.solution.IntervalVarPartialValue"]], "intervalvarvalue (class in docplex.cp.solution)": [[14, "docplex.cp.solution.IntervalVarValue"]], "add_integer_var_solution() (docplex.cp.solution.cpomodelsolution method)": [[14, "docplex.cp.solution.CpoModelSolution.add_integer_var_solution"]], "add_interval_var_solution() (docplex.cp.solution.cpomodelsolution method)": [[14, "docplex.cp.solution.CpoModelSolution.add_interval_var_solution"]], "add_kpi_value() (docplex.cp.solution.cpomodelsolution method)": [[14, "docplex.cp.solution.CpoModelSolution.add_kpi_value"]], "add_var() (docplex.cp.solution.cpomodelsolution method)": [[14, "docplex.cp.solution.CpoModelSolution.add_var"]], "add_var_solution() (docplex.cp.solution.cpomodelsolution method)": [[14, "docplex.cp.solution.CpoModelSolution.add_var_solution"]], "docplex.cp.solution": [[14, "module-docplex.cp.solution"]], "domain_contains() (docplex.cp.solution.cpointvarsolution method)": [[14, "docplex.cp.solution.CpoIntVarSolution.domain_contains"]], "domain_iterator() (docplex.cp.solution.cpointvarsolution method)": [[14, "docplex.cp.solution.CpoIntVarSolution.domain_iterator"]], "end (docplex.cp.solution.intervalvarpartialvalue attribute)": [[14, "docplex.cp.solution.IntervalVarPartialValue.end"]], "end (docplex.cp.solution.intervalvarvalue attribute)": [[14, "docplex.cp.solution.IntervalVarValue.end"]], "get_all_member_constraints() (docplex.cp.solution.cporefineconflictresult method)": [[14, "docplex.cp.solution.CpoRefineConflictResult.get_all_member_constraints"]], "get_all_member_variables() (docplex.cp.solution.cporefineconflictresult method)": [[14, "docplex.cp.solution.CpoRefineConflictResult.get_all_member_variables"]], "get_all_possible_constraints() (docplex.cp.solution.cporefineconflictresult method)": [[14, "docplex.cp.solution.CpoRefineConflictResult.get_all_possible_constraints"]], "get_all_possible_variables() (docplex.cp.solution.cporefineconflictresult method)": [[14, "docplex.cp.solution.CpoRefineConflictResult.get_all_possible_variables"]], "get_all_var_solutions() (docplex.cp.solution.cpomodelsolution method)": [[14, "docplex.cp.solution.CpoModelSolution.get_all_var_solutions"]], "get_all_var_solutions() (docplex.cp.solution.cposolveresult method)": [[14, "docplex.cp.solution.CpoSolveResult.get_all_var_solutions"]], "get_as_constraints() (docplex.cp.solution.cpomodelsolution method)": [[14, "docplex.cp.solution.CpoModelSolution.get_as_constraints"]], "get_conflict_status() (docplex.cp.solution.cporefineconflictresult method)": [[14, "docplex.cp.solution.CpoRefineConflictResult.get_conflict_status"]], "get_cpo() (docplex.cp.solution.cporefineconflictresult method)": [[14, "docplex.cp.solution.CpoRefineConflictResult.get_cpo"]], "get_domain_max() (docplex.cp.solution.cpofloatvarsolution method)": [[14, "docplex.cp.solution.CpoFloatVarSolution.get_domain_max"]], "get_domain_max() (docplex.cp.solution.cpointvarsolution method)": [[14, "docplex.cp.solution.CpoIntVarSolution.get_domain_max"]], "get_domain_min() (docplex.cp.solution.cpofloatvarsolution method)": [[14, "docplex.cp.solution.CpoFloatVarSolution.get_domain_min"]], "get_domain_min() (docplex.cp.solution.cpointvarsolution method)": [[14, "docplex.cp.solution.CpoIntVarSolution.get_domain_min"]], "get_end() (docplex.cp.solution.cpointervalvarsolution method)": [[14, "docplex.cp.solution.CpoIntervalVarSolution.get_end"]], "get_expr() (docplex.cp.solution.cpovarsolution method)": [[14, "docplex.cp.solution.CpoVarSolution.get_expr"]], "get_fail_status() (docplex.cp.solution.cposolveresult method)": [[14, "docplex.cp.solution.CpoSolveResult.get_fail_status"]], "get_function_steps() (docplex.cp.solution.cpostatefunctionsolution method)": [[14, "docplex.cp.solution.CpoStateFunctionSolution.get_function_steps"]], "get_info() (docplex.cp.solution.cporunresult method)": [[14, "docplex.cp.solution.CpoRunResult.get_info"]], "get_infos() (docplex.cp.solution.cporunresult method)": [[14, "docplex.cp.solution.CpoRunResult.get_infos"]], "get_interval_variables() (docplex.cp.solution.cposequencevarsolution method)": [[14, "docplex.cp.solution.CpoSequenceVarSolution.get_interval_variables"]], "get_kpi_value() (docplex.cp.solution.cpomodelsolution method)": [[14, "docplex.cp.solution.CpoModelSolution.get_kpi_value"]], "get_kpis() (docplex.cp.solution.cpomodelsolution method)": [[14, "docplex.cp.solution.CpoModelSolution.get_kpis"]], "get_kpis() (docplex.cp.solution.cposolveresult method)": [[14, "docplex.cp.solution.CpoSolveResult.get_kpis"]], "get_length() (docplex.cp.solution.cpointervalvarsolution method)": [[14, "docplex.cp.solution.CpoIntervalVarSolution.get_length"]], "get_member_constraints() (docplex.cp.solution.cporefineconflictresult method)": [[14, "docplex.cp.solution.CpoRefineConflictResult.get_member_constraints"]], "get_member_variables() (docplex.cp.solution.cporefineconflictresult method)": [[14, "docplex.cp.solution.CpoRefineConflictResult.get_member_variables"]], "get_memory_usage() (docplex.cp.solution.cposolverinfos method)": [[14, "docplex.cp.solution.CpoSolverInfos.get_memory_usage"]], "get_model() (docplex.cp.solution.cporunresult method)": [[14, "docplex.cp.solution.CpoRunResult.get_model"]], "get_model_build_time() (docplex.cp.solution.cpoprocessinfos method)": [[14, "docplex.cp.solution.CpoProcessInfos.get_model_build_time"]], "get_name() (docplex.cp.solution.cpovarsolution method)": [[14, "docplex.cp.solution.CpoVarSolution.get_name"]], "get_number_of_branches() (docplex.cp.solution.cposolverinfos method)": [[14, "docplex.cp.solution.CpoSolverInfos.get_number_of_branches"]], "get_number_of_constraints() (docplex.cp.solution.cposolverinfos method)": [[14, "docplex.cp.solution.CpoSolverInfos.get_number_of_constraints"]], "get_number_of_fails() (docplex.cp.solution.cposolverinfos method)": [[14, "docplex.cp.solution.CpoSolverInfos.get_number_of_fails"]], "get_number_of_integer_vars() (docplex.cp.solution.cposolverinfos method)": [[14, "docplex.cp.solution.CpoSolverInfos.get_number_of_integer_vars"]], "get_number_of_interval_vars() (docplex.cp.solution.cposolverinfos method)": [[14, "docplex.cp.solution.CpoSolverInfos.get_number_of_interval_vars"]], "get_number_of_sequence_vars() (docplex.cp.solution.cposolverinfos method)": [[14, "docplex.cp.solution.CpoSolverInfos.get_number_of_sequence_vars"]], "get_number_of_solutions() (docplex.cp.solution.cposolverinfos method)": [[14, "docplex.cp.solution.CpoSolverInfos.get_number_of_solutions"]], "get_objective_bound() (docplex.cp.solution.cpomodelsolution method)": [[14, "docplex.cp.solution.CpoModelSolution.get_objective_bound"]], "get_objective_bound() (docplex.cp.solution.cposolveresult method)": [[14, "docplex.cp.solution.CpoSolveResult.get_objective_bound"]], "get_objective_bounds() (docplex.cp.solution.cpomodelsolution method)": [[14, "docplex.cp.solution.CpoModelSolution.get_objective_bounds"]], "get_objective_bounds() (docplex.cp.solution.cposolveresult method)": [[14, "docplex.cp.solution.CpoSolveResult.get_objective_bounds"]], "get_objective_gap() (docplex.cp.solution.cpomodelsolution method)": [[14, "docplex.cp.solution.CpoModelSolution.get_objective_gap"]], "get_objective_gap() (docplex.cp.solution.cposolveresult method)": [[14, "docplex.cp.solution.CpoSolveResult.get_objective_gap"]], "get_objective_gaps() (docplex.cp.solution.cpomodelsolution method)": [[14, "docplex.cp.solution.CpoModelSolution.get_objective_gaps"]], "get_objective_gaps() (docplex.cp.solution.cposolveresult method)": [[14, "docplex.cp.solution.CpoSolveResult.get_objective_gaps"]], "get_objective_value() (docplex.cp.solution.cpomodelsolution method)": [[14, "docplex.cp.solution.CpoModelSolution.get_objective_value"]], "get_objective_value() (docplex.cp.solution.cposolveresult method)": [[14, "docplex.cp.solution.CpoSolveResult.get_objective_value"]], "get_objective_values() (docplex.cp.solution.cpomodelsolution method)": [[14, "docplex.cp.solution.CpoModelSolution.get_objective_values"]], "get_objective_values() (docplex.cp.solution.cposolveresult method)": [[14, "docplex.cp.solution.CpoSolveResult.get_objective_values"]], "get_parameter() (docplex.cp.solution.cporunresult method)": [[14, "docplex.cp.solution.CpoRunResult.get_parameter"]], "get_parameters() (docplex.cp.solution.cporunresult method)": [[14, "docplex.cp.solution.CpoRunResult.get_parameters"]], "get_possible_constraints() (docplex.cp.solution.cporefineconflictresult method)": [[14, "docplex.cp.solution.CpoRefineConflictResult.get_possible_constraints"]], "get_possible_variables() (docplex.cp.solution.cporefineconflictresult method)": [[14, "docplex.cp.solution.CpoRefineConflictResult.get_possible_variables"]], "get_process_info() (docplex.cp.solution.cporunresult method)": [[14, "docplex.cp.solution.CpoRunResult.get_process_info"]], "get_process_infos() (docplex.cp.solution.cporunresult method)": [[14, "docplex.cp.solution.CpoRunResult.get_process_infos"]], "get_search_status() (docplex.cp.solution.cposolveresult method)": [[14, "docplex.cp.solution.CpoSolveResult.get_search_status"]], "get_size() (docplex.cp.solution.cpointervalvarsolution method)": [[14, "docplex.cp.solution.CpoIntervalVarSolution.get_size"]], "get_solution() (docplex.cp.solution.cposolveresult method)": [[14, "docplex.cp.solution.CpoSolveResult.get_solution"]], "get_solve_status() (docplex.cp.solution.cposolveresult method)": [[14, "docplex.cp.solution.CpoSolveResult.get_solve_status"]], "get_solve_time() (docplex.cp.solution.cposolveresult method)": [[14, "docplex.cp.solution.CpoSolveResult.get_solve_time"]], "get_solve_time() (docplex.cp.solution.cposolverinfos method)": [[14, "docplex.cp.solution.CpoSolverInfos.get_solve_time"]], "get_solver_info() (docplex.cp.solution.cporunresult method)": [[14, "docplex.cp.solution.CpoRunResult.get_solver_info"]], "get_solver_infos() (docplex.cp.solution.cporunresult method)": [[14, "docplex.cp.solution.CpoRunResult.get_solver_infos"]], "get_solver_log() (docplex.cp.solution.cporunresult method)": [[14, "docplex.cp.solution.CpoRunResult.get_solver_log"]], "get_solver_version() (docplex.cp.solution.cpoprocessinfos method)": [[14, "docplex.cp.solution.CpoProcessInfos.get_solver_version"]], "get_start() (docplex.cp.solution.cpointervalvarsolution method)": [[14, "docplex.cp.solution.CpoIntervalVarSolution.get_start"]], "get_stop_cause() (docplex.cp.solution.cposolveresult method)": [[14, "docplex.cp.solution.CpoSolveResult.get_stop_cause"]], "get_total_solve_time() (docplex.cp.solution.cpoprocessinfos method)": [[14, "docplex.cp.solution.CpoProcessInfos.get_total_solve_time"]], "get_total_time() (docplex.cp.solution.cposolverinfos method)": [[14, "docplex.cp.solution.CpoSolverInfos.get_total_time"]], "get_value() (docplex.cp.solution.cpofloatvarsolution method)": [[14, "docplex.cp.solution.CpoFloatVarSolution.get_value"]], "get_value() (docplex.cp.solution.cpointvarsolution method)": [[14, "docplex.cp.solution.CpoIntVarSolution.get_value"]], "get_value() (docplex.cp.solution.cpointervalvarsolution method)": [[14, "docplex.cp.solution.CpoIntervalVarSolution.get_value"]], "get_value() (docplex.cp.solution.cpomodelsolution method)": [[14, "docplex.cp.solution.CpoModelSolution.get_value"]], "get_value() (docplex.cp.solution.cposequencevarsolution method)": [[14, "docplex.cp.solution.CpoSequenceVarSolution.get_value"]], "get_value() (docplex.cp.solution.cposolveresult method)": [[14, "docplex.cp.solution.CpoSolveResult.get_value"]], "get_value() (docplex.cp.solution.cpostatefunctionsolution method)": [[14, "docplex.cp.solution.CpoStateFunctionSolution.get_value"]], "get_value() (docplex.cp.solution.cpovarsolution method)": [[14, "docplex.cp.solution.CpoVarSolution.get_value"]], "get_var() (docplex.cp.solution.cpovarsolution method)": [[14, "docplex.cp.solution.CpoVarSolution.get_var"]], "get_var_solution() (docplex.cp.solution.cpomodelsolution method)": [[14, "docplex.cp.solution.CpoModelSolution.get_var_solution"]], "get_var_solution() (docplex.cp.solution.cposolveresult method)": [[14, "docplex.cp.solution.CpoSolveResult.get_var_solution"]], "has_var_solutions() (docplex.cp.solution.cpomodelsolution method)": [[14, "docplex.cp.solution.CpoModelSolution.has_var_solutions"]], "is_absent() (docplex.cp.solution.cpointervalvarsolution method)": [[14, "docplex.cp.solution.CpoIntervalVarSolution.is_absent"]], "is_conflict() (docplex.cp.solution.cporefineconflictresult method)": [[14, "docplex.cp.solution.CpoRefineConflictResult.is_conflict"]], "is_empty() (docplex.cp.solution.cpomodelsolution method)": [[14, "docplex.cp.solution.CpoModelSolution.is_empty"]], "is_new_solution() (docplex.cp.solution.cposolveresult method)": [[14, "docplex.cp.solution.CpoSolveResult.is_new_solution"]], "is_optional() (docplex.cp.solution.cpointervalvarsolution method)": [[14, "docplex.cp.solution.CpoIntervalVarSolution.is_optional"]], "is_present() (docplex.cp.solution.cpointervalvarsolution method)": [[14, "docplex.cp.solution.CpoIntervalVarSolution.is_present"]], "is_solution() (docplex.cp.solution.cposolveresult method)": [[14, "docplex.cp.solution.CpoSolveResult.is_solution"]], "is_solution_optimal() (docplex.cp.solution.cposolveresult method)": [[14, "docplex.cp.solution.CpoSolveResult.is_solution_optimal"]], "length (docplex.cp.solution.intervalvarpartialvalue attribute)": [[14, "docplex.cp.solution.IntervalVarPartialValue.length"]], "map_solution() (docplex.cp.solution.cpomodelsolution method)": [[14, "docplex.cp.solution.CpoModelSolution.map_solution"]], "map_solution() (docplex.cp.solution.cposolveresult method)": [[14, "docplex.cp.solution.CpoSolveResult.map_solution"]], "print_conflict() (docplex.cp.solution.cporefineconflictresult method)": [[14, "docplex.cp.solution.CpoRefineConflictResult.print_conflict"]], "print_solution() (docplex.cp.solution.cpomodelsolution method)": [[14, "docplex.cp.solution.CpoModelSolution.print_solution"]], "print_solution() (docplex.cp.solution.cposolveresult method)": [[14, "docplex.cp.solution.CpoSolveResult.print_solution"]], "set_value() (docplex.cp.solution.cpomodelsolution method)": [[14, "docplex.cp.solution.CpoModelSolution.set_value"]], "size (docplex.cp.solution.intervalvarpartialvalue attribute)": [[14, "docplex.cp.solution.IntervalVarPartialValue.size"]], "size (docplex.cp.solution.intervalvarvalue attribute)": [[14, "docplex.cp.solution.IntervalVarValue.size"]], "start (docplex.cp.solution.intervalvarpartialvalue attribute)": [[14, "docplex.cp.solution.IntervalVarPartialValue.start"]], "start (docplex.cp.solution.intervalvarvalue attribute)": [[14, "docplex.cp.solution.IntervalVarValue.start"]], "write() (docplex.cp.solution.cpomodelsolution method)": [[14, "docplex.cp.solution.CpoModelSolution.write"]], "write() (docplex.cp.solution.cporefineconflictresult method)": [[14, "docplex.cp.solution.CpoRefineConflictResult.write"]], "write() (docplex.cp.solution.cposolveresult method)": [[14, "docplex.cp.solution.CpoSolveResult.write"]], "write_in_string() (docplex.cp.solution.cposolveresult method)": [[14, "docplex.cp.solution.CpoSolveResult.write_in_string"]], "cpocallback (class in docplex.cp.solver.cpo_callback)": [[15, "docplex.cp.solver.cpo_callback.CpoCallback"]], "docplex.cp.solver.cpo_callback": [[15, "module-docplex.cp.solver.cpo_callback"]], "invoke() (docplex.cp.solver.cpo_callback.cpocallback method)": [[15, "docplex.cp.solver.cpo_callback.CpoCallback.invoke"]], "cposolver (class in docplex.cp.solver.solver)": [[16, "docplex.cp.solver.solver.CpoSolver"]], "cposolveragent (class in docplex.cp.solver.solver)": [[16, "docplex.cp.solver.solver.CpoSolverAgent"]], "cposolverexception": [[16, "docplex.cp.solver.solver.CpoSolverException"]], "abort_search() (docplex.cp.solver.solver.cposolveragent method)": [[16, "docplex.cp.solver.solver.CpoSolverAgent.abort_search"]], "add_callback() (docplex.cp.solver.solver.cposolver method)": [[16, "docplex.cp.solver.solver.CpoSolver.add_callback"]], "add_listener() (docplex.cp.solver.solver.cposolver method)": [[16, "docplex.cp.solver.solver.CpoSolver.add_listener"]], "docplex.cp.solver.solver": [[16, "module-docplex.cp.solver.solver"]], "end() (docplex.cp.solver.solver.cposolveragent method)": [[16, "docplex.cp.solver.solver.CpoSolverAgent.end"]], "end_search() (docplex.cp.solver.solver.cposolver method)": [[16, "docplex.cp.solver.solver.CpoSolver.end_search"]], "end_search() (docplex.cp.solver.solver.cposolveragent method)": [[16, "docplex.cp.solver.solver.CpoSolverAgent.end_search"]], "explain_failure() (docplex.cp.solver.solver.cposolver method)": [[16, "docplex.cp.solver.solver.CpoSolver.explain_failure"]], "get_cpo_model_string() (docplex.cp.solver.solver.cposolver method)": [[16, "docplex.cp.solver.solver.CpoSolver.get_cpo_model_string"]], "get_last_result() (docplex.cp.solver.solver.cposolver method)": [[16, "docplex.cp.solver.solver.CpoSolver.get_last_result"]], "get_last_solution() (docplex.cp.solver.solver.cposolver method)": [[16, "docplex.cp.solver.solver.CpoSolver.get_last_solution"]], "get_model() (docplex.cp.solver.solver.cposolver method)": [[16, "docplex.cp.solver.solver.CpoSolver.get_model"]], "get_model_format_version() (docplex.cp.solver.solver.cposolver method)": [[16, "docplex.cp.solver.solver.CpoSolver.get_model_format_version"]], "get_parameters() (docplex.cp.solver.solver.cposolver method)": [[16, "docplex.cp.solver.solver.CpoSolver.get_parameters"]], "get_solver_version() (docplex.cp.solver.solver.cposolver method)": [[16, "docplex.cp.solver.solver.CpoSolver.get_solver_version"]], "get_solver_version() (in module docplex.cp.solver.solver)": [[16, "docplex.cp.solver.solver.get_solver_version"]], "get_version_info() (in module docplex.cp.solver.solver)": [[16, "docplex.cp.solver.solver.get_version_info"]], "propagate() (docplex.cp.solver.solver.cposolver method)": [[16, "docplex.cp.solver.solver.CpoSolver.propagate"]], "propagate() (docplex.cp.solver.solver.cposolveragent method)": [[16, "docplex.cp.solver.solver.CpoSolverAgent.propagate"]], "refine_conflict() (docplex.cp.solver.solver.cposolver method)": [[16, "docplex.cp.solver.solver.CpoSolver.refine_conflict"]], "refine_conflict() (docplex.cp.solver.solver.cposolveragent method)": [[16, "docplex.cp.solver.solver.CpoSolverAgent.refine_conflict"]], "remove_callback() (docplex.cp.solver.solver.cposolver method)": [[16, "docplex.cp.solver.solver.CpoSolver.remove_callback"]], "remove_listener() (docplex.cp.solver.solver.cposolver method)": [[16, "docplex.cp.solver.solver.CpoSolver.remove_listener"]], "run_seeds() (docplex.cp.solver.solver.cposolver method)": [[16, "docplex.cp.solver.solver.CpoSolver.run_seeds"]], "run_seeds() (docplex.cp.solver.solver.cposolveragent method)": [[16, "docplex.cp.solver.solver.CpoSolverAgent.run_seeds"]], "search_next() (docplex.cp.solver.solver.cposolver method)": [[16, "docplex.cp.solver.solver.CpoSolver.search_next"]], "search_next() (docplex.cp.solver.solver.cposolveragent method)": [[16, "docplex.cp.solver.solver.CpoSolverAgent.search_next"]], "set_explain_failure_tags() (docplex.cp.solver.solver.cposolveragent method)": [[16, "docplex.cp.solver.solver.CpoSolverAgent.set_explain_failure_tags"]], "set_solve_with_search_next() (docplex.cp.solver.solver.cposolver method)": [[16, "docplex.cp.solver.solver.CpoSolver.set_solve_with_search_next"]], "solve() (docplex.cp.solver.solver.cposolver method)": [[16, "docplex.cp.solver.solver.CpoSolver.solve"]], "solve() (docplex.cp.solver.solver.cposolveragent method)": [[16, "docplex.cp.solver.solver.CpoSolverAgent.solve"]], "solve_with_search_next() (docplex.cp.solver.solver.cposolver method)": [[16, "docplex.cp.solver.solver.CpoSolver.solve_with_search_next"]], "start_search() (docplex.cp.solver.solver.cposolveragent method)": [[16, "docplex.cp.solver.solver.CpoSolverAgent.start_search"]], "autostoplistener (class in docplex.cp.solver.solver_listener)": [[17, "docplex.cp.solver.solver_listener.AutoStopListener"]], "cposolverlistener (class in docplex.cp.solver.solver_listener)": [[17, "docplex.cp.solver.solver_listener.CpoSolverListener"]], "delaylistener (class in docplex.cp.solver.solver_listener)": [[17, "docplex.cp.solver.solver_listener.DelayListener"]], "logsolverlistener (class in docplex.cp.solver.solver_listener)": [[17, "docplex.cp.solver.solver_listener.LogSolverListener"]], "solverprogresspanellistener (class in docplex.cp.solver.solver_listener)": [[17, "docplex.cp.solver.solver_listener.SolverProgressPanelListener"]], "conflict_found() (docplex.cp.solver.solver_listener.cposolverlistener method)": [[17, "docplex.cp.solver.solver_listener.CpoSolverListener.conflict_found"]], "docplex.cp.solver.solver_listener": [[17, "module-docplex.cp.solver.solver_listener"]], "end_operation() (docplex.cp.solver.solver_listener.cposolverlistener method)": [[17, "docplex.cp.solver.solver_listener.CpoSolverListener.end_operation"]], "end_operation() (docplex.cp.solver.solver_listener.logsolverlistener method)": [[17, "docplex.cp.solver.solver_listener.LogSolverListener.end_operation"]], "end_refine_conflict() (docplex.cp.solver.solver_listener.cposolverlistener method)": [[17, "docplex.cp.solver.solver_listener.CpoSolverListener.end_refine_conflict"]], "end_solve() (docplex.cp.solver.solver_listener.autostoplistener method)": [[17, "docplex.cp.solver.solver_listener.AutoStopListener.end_solve"]], "end_solve() (docplex.cp.solver.solver_listener.cposolverlistener method)": [[17, "docplex.cp.solver.solver_listener.CpoSolverListener.end_solve"]], "new_log_data() (docplex.cp.solver.solver_listener.cposolverlistener method)": [[17, "docplex.cp.solver.solver_listener.CpoSolverListener.new_log_data"]], "new_result() (docplex.cp.solver.solver_listener.cposolverlistener method)": [[17, "docplex.cp.solver.solver_listener.CpoSolverListener.new_result"]], "new_result() (docplex.cp.solver.solver_listener.logsolverlistener method)": [[17, "docplex.cp.solver.solver_listener.LogSolverListener.new_result"]], "result_found() (docplex.cp.solver.solver_listener.autostoplistener method)": [[17, "docplex.cp.solver.solver_listener.AutoStopListener.result_found"]], "result_found() (docplex.cp.solver.solver_listener.cposolverlistener method)": [[17, "docplex.cp.solver.solver_listener.CpoSolverListener.result_found"]], "result_found() (docplex.cp.solver.solver_listener.delaylistener method)": [[17, "docplex.cp.solver.solver_listener.DelayListener.result_found"]], "solver_created() (docplex.cp.solver.solver_listener.cposolverlistener method)": [[17, "docplex.cp.solver.solver_listener.CpoSolverListener.solver_created"]], "solver_created() (docplex.cp.solver.solver_listener.logsolverlistener method)": [[17, "docplex.cp.solver.solver_listener.LogSolverListener.solver_created"]], "start_operation() (docplex.cp.solver.solver_listener.cposolverlistener method)": [[17, "docplex.cp.solver.solver_listener.CpoSolverListener.start_operation"]], "start_operation() (docplex.cp.solver.solver_listener.logsolverlistener method)": [[17, "docplex.cp.solver.solver_listener.LogSolverListener.start_operation"]], "start_refine_conflict() (docplex.cp.solver.solver_listener.cposolverlistener method)": [[17, "docplex.cp.solver.solver_listener.CpoSolverListener.start_refine_conflict"]], "start_solve() (docplex.cp.solver.solver_listener.autostoplistener method)": [[17, "docplex.cp.solver.solver_listener.AutoStopListener.start_solve"]], "start_solve() (docplex.cp.solver.solver_listener.cposolverlistener method)": [[17, "docplex.cp.solver.solver_listener.CpoSolverListener.start_solve"]], "barrier (class in docplex.cp.utils)": [[18, "docplex.cp.utils.Barrier"]], "chrono (class in docplex.cp.utils)": [[18, "docplex.cp.utils.Chrono"]], "context (class in docplex.cp.utils)": [[18, "docplex.cp.utils.Context"]], "cpoexception": [[18, "docplex.cp.utils.CpoException"]], "cponotsupportedexception": [[18, "docplex.cp.utils.CpoNotSupportedException"]], "functioncache (class in docplex.cp.utils)": [[18, "docplex.cp.utils.FunctionCache"]], "idallocator (class in docplex.cp.utils)": [[18, "docplex.cp.utils.IdAllocator"]], "identityaccessor (class in docplex.cp.utils)": [[18, "docplex.cp.utils.IdentityAccessor"]], "infodict (class in docplex.cp.utils)": [[18, "docplex.cp.utils.InfoDict"]], "keyiddict (class in docplex.cp.utils)": [[18, "docplex.cp.utils.KeyIdDict"]], "listdict (class in docplex.cp.utils)": [[18, "docplex.cp.utils.ListDict"]], "objectcache (class in docplex.cp.utils)": [[18, "docplex.cp.utils.ObjectCache"]], "objectcachebyid (class in docplex.cp.utils)": [[18, "docplex.cp.utils.ObjectCacheById"]], "persistentcontext (class in docplex.cp.utils)": [[18, "docplex.cp.utils.PersistentContext"]], "safeidallocator (class in docplex.cp.utils)": [[18, "docplex.cp.utils.SafeIdAllocator"]], "textfilelinereader (class in docplex.cp.utils)": [[18, "docplex.cp.utils.TextFileLineReader"]], "allocate() (docplex.cp.utils.idallocator method)": [[18, "docplex.cp.utils.IdAllocator.allocate"]], "allocate() (docplex.cp.utils.safeidallocator method)": [[18, "docplex.cp.utils.SafeIdAllocator.allocate"]], "append() (docplex.cp.utils.listdict method)": [[18, "docplex.cp.utils.ListDict.append"]], "assert_arg_int_interval() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.assert_arg_int_interval"]], "check_default() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.check_default"]], "clear() (docplex.cp.utils.functioncache method)": [[18, "docplex.cp.utils.FunctionCache.clear"]], "clear() (docplex.cp.utils.keyiddict method)": [[18, "docplex.cp.utils.KeyIdDict.clear"]], "clear() (docplex.cp.utils.objectcache method)": [[18, "docplex.cp.utils.ObjectCache.clear"]], "clear() (docplex.cp.utils.objectcachebyid method)": [[18, "docplex.cp.utils.ObjectCacheById.clear"]], "clone() (docplex.cp.utils.context method)": [[18, "docplex.cp.utils.Context.clone"]], "clone() (docplex.cp.utils.infodict method)": [[18, "docplex.cp.utils.InfoDict.clone"]], "close() (docplex.cp.utils.textfilelinereader method)": [[18, "docplex.cp.utils.TextFileLineReader.close"]], "compare_natural() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.compare_natural"]], "create_stdout_logger() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.create_stdout_logger"]], "decode_integer_big_endian_4() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.decode_integer_big_endian_4"]], "del_attribute() (docplex.cp.utils.context method)": [[18, "docplex.cp.utils.Context.del_attribute"]], "docplex.cp.utils": [[18, "module-docplex.cp.utils"]], "encode_csv_string() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.encode_csv_string"]], "encode_integer_big_endian_4() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.encode_integer_big_endian_4"]], "equals() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.equals"]], "export_flat() (docplex.cp.utils.context method)": [[18, "docplex.cp.utils.Context.export_flat"]], "export_flat_as_string() (docplex.cp.utils.context method)": [[18, "docplex.cp.utils.Context.export_flat_as_string"]], "format_text() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.format_text"]], "get() (docplex.cp.utils.functioncache method)": [[18, "docplex.cp.utils.FunctionCache.get"]], "get() (docplex.cp.utils.keyiddict method)": [[18, "docplex.cp.utils.KeyIdDict.get"]], "get() (docplex.cp.utils.objectcache method)": [[18, "docplex.cp.utils.ObjectCache.get"]], "get() (docplex.cp.utils.objectcachebyid method)": [[18, "docplex.cp.utils.ObjectCacheById.get"]], "get_attribute() (docplex.cp.utils.context method)": [[18, "docplex.cp.utils.Context.get_attribute"]], "get_by_path() (docplex.cp.utils.context method)": [[18, "docplex.cp.utils.Context.get_by_path"]], "get_count() (docplex.cp.utils.idallocator method)": [[18, "docplex.cp.utils.IdAllocator.get_count"]], "get_count() (docplex.cp.utils.safeidallocator method)": [[18, "docplex.cp.utils.SafeIdAllocator.get_count"]], "get_elapsed() (docplex.cp.utils.chrono method)": [[18, "docplex.cp.utils.Chrono.get_elapsed"]], "get_file_name_only() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.get_file_name_only"]], "get_log_output() (docplex.cp.utils.context method)": [[18, "docplex.cp.utils.Context.get_log_output"]], "get_main_file() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.get_main_file"]], "get_module_element_from_path() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.get_module_element_from_path"]], "get_module_version() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.get_module_version"]], "get_parent() (docplex.cp.utils.context method)": [[18, "docplex.cp.utils.Context.get_parent"]], "get_prefix() (docplex.cp.utils.idallocator method)": [[18, "docplex.cp.utils.IdAllocator.get_prefix"]], "get_prefix() (docplex.cp.utils.safeidallocator method)": [[18, "docplex.cp.utils.SafeIdAllocator.get_prefix"]], "get_root() (docplex.cp.utils.context method)": [[18, "docplex.cp.utils.Context.get_root"]], "get_start() (docplex.cp.utils.chrono method)": [[18, "docplex.cp.utils.Chrono.get_start"]], "get_system_path() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.get_system_path"]], "import_flat() (docplex.cp.utils.context method)": [[18, "docplex.cp.utils.Context.import_flat"]], "incr() (docplex.cp.utils.infodict method)": [[18, "docplex.cp.utils.InfoDict.incr"]], "int_to_base() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.int_to_base"]], "is_array() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.is_array"]], "is_array_of_type() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.is_array_of_type"]], "is_bool() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.is_bool"]], "is_exe_file() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.is_exe_file"]], "is_float() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.is_float"]], "is_in() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.is_in"]], "is_in_notebook() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.is_in_notebook"]], "is_int() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.is_int"]], "is_int_array() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.is_int_array"]], "is_int_value() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.is_int_value"]], "is_iterable() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.is_iterable"]], "is_log_enabled() (docplex.cp.utils.context method)": [[18, "docplex.cp.utils.Context.is_log_enabled"]], "is_number() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.is_number"]], "is_panda_series() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.is_panda_series"]], "is_string() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.is_string"]], "is_symbol() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.is_symbol"]], "is_symbol_char() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.is_symbol_char"]], "is_tuple() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.is_tuple"]], "keys() (docplex.cp.utils.keyiddict method)": [[18, "docplex.cp.utils.KeyIdDict.keys"]], "keys() (docplex.cp.utils.objectcache method)": [[18, "docplex.cp.utils.ObjectCache.keys"]], "keys() (docplex.cp.utils.objectcachebyid method)": [[18, "docplex.cp.utils.ObjectCacheById.keys"]], "list_module_public_functions() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.list_module_public_functions"]], "log() (docplex.cp.utils.context method)": [[18, "docplex.cp.utils.Context.log"]], "make_directories() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.make_directories"]], "make_unicode() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.make_unicode"]], "open_utf8() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.open_utf8"]], "parse_json_string() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.parse_json_string"]], "print_context() (docplex.cp.utils.context method)": [[18, "docplex.cp.utils.Context.print_context"]], "print_infos() (docplex.cp.utils.infodict method)": [[18, "docplex.cp.utils.InfoDict.print_infos"]], "read_string_file() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.read_string_file"]], "readline() (docplex.cp.utils.textfilelinereader method)": [[18, "docplex.cp.utils.TextFileLineReader.readline"]], "replace() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.replace"]], "replace_in_tuple() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.replace_in_tuple"]], "reset() (docplex.cp.utils.safeidallocator method)": [[18, "docplex.cp.utils.SafeIdAllocator.reset"]], "restart() (docplex.cp.utils.chrono method)": [[18, "docplex.cp.utils.Chrono.restart"]], "save() (docplex.cp.utils.persistentcontext method)": [[18, "docplex.cp.utils.PersistentContext.save"]], "search_and_replace_attribute() (docplex.cp.utils.context method)": [[18, "docplex.cp.utils.Context.search_and_replace_attribute"]], "search_exec_file() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.search_exec_file"]], "set() (docplex.cp.utils.keyiddict method)": [[18, "docplex.cp.utils.KeyIdDict.set"]], "set() (docplex.cp.utils.objectcache method)": [[18, "docplex.cp.utils.ObjectCache.set"]], "set() (docplex.cp.utils.objectcachebyid method)": [[18, "docplex.cp.utils.ObjectCacheById.set"]], "set_attribute() (docplex.cp.utils.context method)": [[18, "docplex.cp.utils.Context.set_attribute"]], "set_by_path() (docplex.cp.utils.context method)": [[18, "docplex.cp.utils.Context.set_by_path"]], "set_other() (docplex.cp.utils.context method)": [[18, "docplex.cp.utils.Context.set_other"]], "size() (docplex.cp.utils.objectcache method)": [[18, "docplex.cp.utils.ObjectCache.size"]], "string_to_value() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.string_to_value"]], "to_compact_si() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.to_compact_SI"]], "to_internal_string() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.to_internal_string"]], "to_printable_id() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.to_printable_id"]], "to_printable_string() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.to_printable_string"]], "to_string() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.to_string"]], "values() (docplex.cp.utils.keyiddict method)": [[18, "docplex.cp.utils.KeyIdDict.values"]], "values() (docplex.cp.utils.objectcache method)": [[18, "docplex.cp.utils.ObjectCache.values"]], "values() (docplex.cp.utils.objectcachebyid method)": [[18, "docplex.cp.utils.ObjectCacheById.values"]], "wait() (docplex.cp.utils.barrier method)": [[18, "docplex.cp.utils.Barrier.wait"]], "write() (docplex.cp.utils.context method)": [[18, "docplex.cp.utils.Context.write"]], "write() (docplex.cp.utils.infodict method)": [[18, "docplex.cp.utils.InfoDict.write"]], "write_checking_unicode_errors() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.write_checking_unicode_errors"]], "write_string_file() (in module docplex.cp.utils)": [[18, "docplex.cp.utils.write_string_file"]], "docplex.cp.utils_visu": [[19, "module-docplex.cp.utils_visu"]], "function() (in module docplex.cp.utils_visu)": [[19, "docplex.cp.utils_visu.function"]], "interval() (in module docplex.cp.utils_visu)": [[19, "docplex.cp.utils_visu.interval"]], "is_visu_enabled() (in module docplex.cp.utils_visu)": [[19, "docplex.cp.utils_visu.is_visu_enabled"]], "matrix() (in module docplex.cp.utils_visu)": [[19, "docplex.cp.utils_visu.matrix"]], "naming() (in module docplex.cp.utils_visu)": [[19, "docplex.cp.utils_visu.naming"]], "panel() (in module docplex.cp.utils_visu)": [[19, "docplex.cp.utils_visu.panel"]], "pause() (in module docplex.cp.utils_visu)": [[19, "docplex.cp.utils_visu.pause"]], "segment() (in module docplex.cp.utils_visu)": [[19, "docplex.cp.utils_visu.segment"]], "sequence() (in module docplex.cp.utils_visu)": [[19, "docplex.cp.utils_visu.sequence"]], "show() (in module docplex.cp.utils_visu)": [[19, "docplex.cp.utils_visu.show"]], "timeline() (in module docplex.cp.utils_visu)": [[19, "docplex.cp.utils_visu.timeline"]], "transition() (in module docplex.cp.utils_visu)": [[19, "docplex.cp.utils_visu.transition"]], "abstractlocalenvironment (class in docplex.util.environment)": [[20, "docplex.util.environment.AbstractLocalEnvironment"]], "environment (class in docplex.util.environment)": [[20, "docplex.util.environment.Environment"]], "localenvironment (class in docplex.util.environment)": [[20, "docplex.util.environment.LocalEnvironment"]], "notavailableerror": [[20, "docplex.util.environment.NotAvailableError"]], "outputattachmenttransaction (class in docplex.util.environment)": [[20, "docplex.util.environment.OutputAttachmentTransaction"]], "overrideenvironment (class in docplex.util.environment)": [[20, "docplex.util.environment.OverrideEnvironment"]], "solvedetailsfilter (class in docplex.util.environment)": [[20, "docplex.util.environment.SolveDetailsFilter"]], "abort_callbacks (docplex.util.environment.environment attribute)": [[20, "docplex.util.environment.Environment.abort_callbacks"]], "add_abort_callback() (in module docplex.util.environment)": [[20, "docplex.util.environment.add_abort_callback"]], "close() (docplex.util.environment.outputattachmenttransaction method)": [[20, "docplex.util.environment.OutputAttachmentTransaction.close"]], "commit() (docplex.util.environment.outputattachmenttransaction method)": [[20, "docplex.util.environment.OutputAttachmentTransaction.commit"]], "create_transaction() (docplex.util.environment.environment method)": [[20, "docplex.util.environment.Environment.create_transaction"]], "default_solution_storage_handler() (in module docplex.util.environment)": [[20, "docplex.util.environment.default_solution_storage_handler"]], "docplex.util.environment": [[20, "module-docplex.util.environment"]], "filter() (docplex.util.environment.solvedetailsfilter method)": [[20, "docplex.util.environment.SolveDetailsFilter.filter"]], "get_available_core_count() (docplex.util.environment.abstractlocalenvironment method)": [[20, "docplex.util.environment.AbstractLocalEnvironment.get_available_core_count"]], "get_available_core_count() (docplex.util.environment.environment method)": [[20, "docplex.util.environment.Environment.get_available_core_count"]], "get_available_core_count() (in module docplex.util.environment)": [[20, "docplex.util.environment.get_available_core_count"]], "get_engine_log_level() (docplex.util.environment.environment method)": [[20, "docplex.util.environment.Environment.get_engine_log_level"]], "get_environment() (in module docplex.util.environment)": [[20, "docplex.util.environment.get_environment"]], "get_input_stream() (docplex.util.environment.abstractlocalenvironment method)": [[20, "docplex.util.environment.AbstractLocalEnvironment.get_input_stream"]], "get_input_stream() (docplex.util.environment.environment method)": [[20, "docplex.util.environment.Environment.get_input_stream"]], "get_input_stream() (in module docplex.util.environment)": [[20, "docplex.util.environment.get_input_stream"]], "get_output_stream() (docplex.util.environment.abstractlocalenvironment method)": [[20, "docplex.util.environment.AbstractLocalEnvironment.get_output_stream"]], "get_output_stream() (docplex.util.environment.environment method)": [[20, "docplex.util.environment.Environment.get_output_stream"]], "get_output_stream() (in module docplex.util.environment)": [[20, "docplex.util.environment.get_output_stream"]], "get_parameter() (docplex.util.environment.abstractlocalenvironment method)": [[20, "docplex.util.environment.AbstractLocalEnvironment.get_parameter"]], "get_parameter() (docplex.util.environment.environment method)": [[20, "docplex.util.environment.Environment.get_parameter"]], "get_parameter() (in module docplex.util.environment)": [[20, "docplex.util.environment.get_parameter"]], "get_parameters() (docplex.util.environment.abstractlocalenvironment method)": [[20, "docplex.util.environment.AbstractLocalEnvironment.get_parameters"]], "get_parameters() (docplex.util.environment.environment method)": [[20, "docplex.util.environment.Environment.get_parameters"]], "get_stop_callback() (docplex.util.environment.environment method)": [[20, "docplex.util.environment.Environment.get_stop_callback"]], "is_debug_mode() (docplex.util.environment.environment method)": [[20, "docplex.util.environment.Environment.is_debug_mode"]], "make_attachment_name() (in module docplex.util.environment)": [[20, "docplex.util.environment.make_attachment_name"]], "maketrans() (in module docplex.util.environment)": [[20, "docplex.util.environment.maketrans"]], "publish_solve_details() (docplex.util.environment.environment method)": [[20, "docplex.util.environment.Environment.publish_solve_details"]], "read_df() (docplex.util.environment.environment method)": [[20, "docplex.util.environment.Environment.read_df"]], "read_df() (in module docplex.util.environment)": [[20, "docplex.util.environment.read_df"]], "record_history_fields (docplex.util.environment.environment attribute)": [[20, "docplex.util.environment.Environment.record_history_fields"]], "record_history_size (docplex.util.environment.environment attribute)": [[20, "docplex.util.environment.Environment.record_history_size"]], "record_interval (docplex.util.environment.environment attribute)": [[20, "docplex.util.environment.Environment.record_interval"]], "remove_abort_callback() (in module docplex.util.environment)": [[20, "docplex.util.environment.remove_abort_callback"]], "set_output_attachment() (docplex.util.environment.abstractlocalenvironment method)": [[20, "docplex.util.environment.AbstractLocalEnvironment.set_output_attachment"]], "set_output_attachment() (docplex.util.environment.environment method)": [[20, "docplex.util.environment.Environment.set_output_attachment"]], "set_output_attachment() (in module docplex.util.environment)": [[20, "docplex.util.environment.set_output_attachment"]], "set_output_attachments() (docplex.util.environment.abstractlocalenvironment method)": [[20, "docplex.util.environment.AbstractLocalEnvironment.set_output_attachments"]], "set_output_attachments() (docplex.util.environment.environment method)": [[20, "docplex.util.environment.Environment.set_output_attachments"]], "set_output_attachments() (docplex.util.environment.outputattachmenttransaction method)": [[20, "docplex.util.environment.OutputAttachmentTransaction.set_output_attachments"]], "set_output_attachments() (in module docplex.util.environment)": [[20, "docplex.util.environment.set_output_attachments"]], "set_stop_callback() (docplex.util.environment.environment method)": [[20, "docplex.util.environment.Environment.set_stop_callback"]], "solution_storage_handler (docplex.util.environment.environment attribute)": [[20, "docplex.util.environment.Environment.solution_storage_handler"]], "stop_callback (docplex.util.environment.environment property)": [[20, "docplex.util.environment.Environment.stop_callback"]], "store_solution() (docplex.util.environment.environment method)": [[20, "docplex.util.environment.Environment.store_solution"]], "translate() (in module docplex.util.environment)": [[20, "docplex.util.environment.translate"]], "update_solve_details() (docplex.util.environment.environment method)": [[20, "docplex.util.environment.Environment.update_solve_details"]], "update_solve_details() (in module docplex.util.environment)": [[20, "docplex.util.environment.update_solve_details"]], "write_df() (docplex.util.environment.environment method)": [[20, "docplex.util.environment.Environment.write_df"]], "write_df() (in module docplex.util.environment)": [[20, "docplex.util.environment.write_df"]]}})